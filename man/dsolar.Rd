% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsolar.R
\name{dsolar}
\alias{dsolar}
\alias{psolarGHI}
\alias{qsolarGHI}
\alias{rsolarGHI}
\title{Solar radiation random variable}
\usage{
dsolar(x, Ct, alpha, beta, pdf_Yt, log = FALSE)
}
\arguments{
\item{x}{vector of quantiles.}

\item{Ct}{clear sky radiation}

\item{alpha}{parameter `alpha > 0`.}

\item{beta}{parameter `beta > 0` and `alpha + beta < 1`.}

\item{pdf_Yt}{density of Yt.}

\item{log}{logical; if `TRUE`, probabilities are returned as `log(p)`.}

\item{p}{vector of probabilities.}

\item{log.p}{logical; if `TRUE`, probabilities p are given as `log(p)`.}

\item{lower.tail}{logical; if `TRUE`, the default, the computed probabilities are `P[X < x]`. Otherwise, `P[X > x]`.}
}
\description{
Solar radiation density, distribution, quantile and random generator.
}
\details{
Consider a random variable \eqn{Y \in [-\infty, \infty]} with a known density function `pdf_Yt`. Then
the funtion `dsolarGHI` compute the density function of the following transformed random variable, i.e.
\deqn{GHI(Y) = C_t (1-\alpha-\beta \exp(-\exp(Y)))}
where \eqn{GHI(Y) \in [Ct(1-\alpha-\beta), Ct(1-\alpha)]}.
}
\examples{
# Density
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x, sd=2))

# Distribution
psolarGHI(3.993, 7, 0.001, 0.9, function(x) dnorm(x))
psolarGHI(3.993, 7, 0.001, 0.9, function(x) dnorm(x, sd=2))

# Quantile
qsolarGHI(c(0.05, 0.95), 7, 0.001, 0.9, function(x) dnorm(x))
qsolarGHI(c(0.05, 0.95), 7, 0.001, 0.9, function(x) dnorm(x, sd=2))

# Random generator (I)
Ct <- Bologna$seasonal_data$Ct
GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, function(x) dnorm(x, sd=0.8)))
plot(1:366, GHI, type="l")

# Random generator (II)
pdf <- function(x) dmixnorm(x, c(-0.8, 0.5), c(1.2, 0.7), c(0.3, 0.7))
GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, pdf))
plot(1:366, GHI, type="l")
}
