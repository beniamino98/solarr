% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsolarGHI.R
\name{dsolarGHI}
\alias{dsolarGHI}
\alias{psolarGHI}
\alias{qsolarGHI}
\alias{rsolarGHI}
\title{Solar radiation random variable}
\usage{
dsolarGHI(x, Ct, alpha, beta, pdf_Y, log = FALSE)

psolarGHI(x, Ct, alpha, beta, cdf_Y, log.p = FALSE, lower.tail = TRUE)

qsolarGHI(p, Ct, alpha, beta, cdf_Y, log.p = FALSE, lower.tail = TRUE)

rsolarGHI(n, Ct, alpha, beta, cdf_Y)
}
\arguments{
\item{x}{vector of quantiles.}

\item{Ct}{clear sky radiation}

\item{alpha}{parameter \code{alpha > 0}.}

\item{beta}{parameter \code{beta > 0} and \code{alpha + beta < 1}.}

\item{pdf_Y}{density of Y.}

\item{log}{logical; if \code{TRUE}, probabilities are returned as \code{log(p)}.}

\item{cdf_Y}{distribution of Y.}

\item{log.p}{logical; if \code{TRUE}, probabilities p are given as \code{log(p)}.}

\item{lower.tail}{logical; if \code{TRUE}, the default, the computed probabilities are \code{P[X < x]}. Otherwise, \code{P[X > x]}.}

\item{p}{vector of probabilities.}
}
\description{
Solar radiation density, distribution, quantile and random generator.
}
\details{
Consider a random variable \eqn{Y \in [-\infty, \infty]} with a known density function \code{pdf_Y}. Then
the funtion \code{dsolarGHI} compute the density function of the following transformed random variable, i.e.
\deqn{GHI(Y) = C_t (1-\alpha-\beta \exp(-\exp(Y)))}
where \eqn{GHI(Y) \in [C_t(1-\alpha-\beta), C_t(1-\alpha)]}.
}
\examples{
# Parameters
alpha = 0
beta = 0.9
Ct <- 7
# Grid of points
grid <- seq(Ct*(1-alpha-beta), Ct*(1-alpha), by = 0.01)

# Density
dsolarGHI(5, Ct, alpha, beta, function(x) dnorm(x))
dsolarGHI(5, Ct, alpha, beta, function(x) dnorm(x, sd=2))
plot(grid, dsolarGHI(grid, Ct, alpha, beta, function(x) dnorm(x, mean = -1, sd = 0.9)), type="l")

# Distribution
psolarGHI(3.993, 7, 0.001, 0.9, function(x) pnorm(x))
psolarGHI(3.993, 7, 0.001, 0.9, function(x) pnorm(x, sd=2))
plot(grid, psolarGHI(grid, Ct, alpha, beta, function(x) pnorm(x, sd = 0.2)), type="l")

# Quantile
qsolarGHI(c(0.05, 0.95), 7, 0.001, 0.9, function(x) pnorm(x))
qsolarGHI(c(0.05, 0.95), 7, 0.001, 0.9, function(x) pnorm(x, sd=2))

# Random generator (I)
Ct <- Bologna$seasonal_data$Ct
GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, alpha, beta, function(x) pnorm(x, sd=1.4)))
plot(1:366, GHI, type="l")

# Random generator (II)
cdf <- function(x) pmixnorm(x, c(-0.8, 0.5), c(1.2, 0.7), c(0.3, 0.7))
GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, cdf))
plot(1:366, GHI, type="l")
}
