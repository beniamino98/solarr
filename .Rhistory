#' plot(1:366, GHI, type="l")
#' @rdname dsolarGHI
#' @aliases dsolarGHI
#' @aliases psolarGHI
#' @aliases qsolarGHI
#' @aliases rsolarGHI
#' @export
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
}
}
#' # Random generator (II)
#' pdf <- function(x) dmixnorm(x, c(-0.8, 0.5), c(1.2, 0.7), c(0.3, 0.7))
#' GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, pdf))
#' plot(1:366, GHI, type="l")
#' @rdname dsolarGHI
#' @aliases dsolarGHI
#' @aliases psolarGHI
#' @aliases qsolarGHI
#' @aliases rsolarGHI
#' @export
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
.Call("dsolarGHI", x, Ct, alpha, beta, pdf_Yt, as.integer(log))
}
}
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
.Call("dsolarGHI", x, Ct, alpha, beta, pdf_Yt, as.integer(log))
}
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x, sd=2))
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
devtools::document()
devtools::document()
devtools::document()
library(solarr)
library(solarr)
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
devtools::document()
devtools::clean_dll()
devtools::document()
library(solarr)
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
getNativeSymbolInfo("dsolarGHI", "solarGHI")
devtools::document()
devtools::clean_dll()
devtools::document()
library(solarr)
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
getNativeSymbolInfo("dsolarGHI", "solarr")
devtools::document()
devtools::document()
library(solarr)
pdf <- PDF(dnorm, mean = 0.3, sd = 1.3)
pdf(3)
dnorm(3, mean = 0.3, sd = 1.3)
# Distribution
cdf <- CDF(dnorm, mean = 0.3, sd = 1.3)
cdf(3)
cdf <- CDF(dnorm, mean = 0.3, sd = 1.3)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/PDF.R")
# Distribution
cdf <- CDF(dnorm, mean = 0.3, sd = 1.3)
cdf(3)
pnorm(3, mean = 0.3, sd = 1.3)
# Numeric quantile function
pnorm(numericQuantile(dnorm)(0.9))
@name PDF
Quantile
# Density function (right)
p <- dsnorm(x, shape = 4.9)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/dsn.R")
# Grid of points
x <- seq(-5, 5, 0.01)
# Density function (skewed right)
p <- dsnorm(x, shape = 4.9)
plot(x, p, type = "l")
# Density function (skewed right)
p <- dsnorm(x, shape = 4.9)
plot(x, p, type = "l")
plot(x, p, type = "l")
x
p
plot(x, p, type = "l")
rm(plot)
plot(x, p, type = "l")
dsnorm(x, shape = 4.9)
p <- dsnorm(x, shape = 4.9)
library(ggplot2)
ggplot()+
geom_line(aes(x, p))
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/dsn.R")
# Grid of points
x <- seq(-5, 5, 0.01)
# Density function (skewed right)
p <- dsnorm(x, shape = 4.9)
plot(x, p, type = "l")
# Density function (skewed right)
p <- dsnorm(x, shape = -4.9)
plot(x, p, type = "l")
# Density function (left tailed)
p <- dsnorm(x, shape = -4.9)
plot(x, p, type = "l")
# Distribution function
p <- psnorm(x)
plot(x, p, type = "l")
# Quantile function
dsnorm(0.1)
psnorm(qsnorm(0.9))
devtools::document()
devtools::build_manual()
library(solarr)
library(solarr)
library(solarr)
control <- control_solarModel(outliers_quantile = 0.005)
# Model specification
spec <- solarModel_spec("Oslo", from="2005-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$parameters
Bologna$parameters$AR_model_Yt
spec <- solarModel_spec("Oslo", from="2008-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$parameters$AR_model_Yt
spec <- solarModel_spec("Oslo", from="2005-01-04", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$parameters
Bologna$parameters$AR_model_Yt
devtools::document()
library(solarr)
devtools::document()
library(solarr)
devtools::document()
library(solarr)
dmvsolarGHI(c(0.4, 5), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.4, 6), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(1, 6), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.95, 6), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
#' Bivariate PDF GHI
#' @param x vector of quantiles.
#' @param Ct clear sky radiation
#' @param alpha parameters `alpha > 0`.
#' @param beta parameters `beta > 0` and `alpha + beta < 1`.
#' @param joint_pdf_Yt joint density of Y1_t, Y2_t.
#' @rdname dmvsolarGHI
#' @export
dmvsolarGHI <- function(x, Ct, alpha, beta, joint_pdf_Yt){
if (is.vector(x)) {
x <- matrix(x, nrow = 1)
}
z <- x
z[,1] <- (1 - x[,1] - alpha[1])/beta[1]
z[,2] <- (1 - x[,2]/Ct - alpha[2])/beta[2]
u <- log(-log(z))
# Compute denominator
z_prod <- apply(z, 1, prod)
# Denominator
den <- Ct*prod(beta)*apply(z, 1, prod)*apply(log(z), 1, prod)
# Mixture probabilities
probs <- (1/den)*joint_pdf_Yt(u)
#probs[is.nan(probs)] <- 0
return(probs)
}
dmvsolarGHI(c(0.95, 6), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 6), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.9), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.9999), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.999), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.99), 6, c(0.001, 0.001), c(0.95, 0.93),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.99), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.9999), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.999), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.99), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.991), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.992), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.993), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.997), 6, c(0.001, 0.001), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.997), 6, c(0.001, 0), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 6), 6, c(0.001, 0), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.999999), 6, c(0.001, 0), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.94, 5.999999999), 6, c(0.001, 0), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(1, 5.999999999), 6, c(0.001, 0), c(0.95, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(1, 5.999999999), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.999, 5.999999999), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
exp(0.01)
exp(0.000001)
exp(-0.000001)
exp(-1)
exp(-exp(5.999))
exp(-exp(0))
exp(-exp(3))
exp(3-exp(3))
exp(-exp(6))
dmvsolarGHI(c(0.999, 5.999999999), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
exp(-exp(1))
exp(-exp(abs(1)))
5.999999999 - exp(-exp(abs(1)))
5.999999999 - exp(-exp(abs(3)))
5.999999999 - exp(-exp(abs(7)))
6 - exp(-exp(abs(7)))
exp(-exp(abs(7)))
6 - exp(-exp(abs(0)))
exp(-exp(abs(0)))
6 - exp(-exp(abs(2)))
6 - exp(-exp(abs(3)))
6 - exp(-exp(abs(0)))
6 - exp(-exp(abs(0)))
6.5 - exp(-exp(abs(0)))
6 - exp(-exp(abs(0)))
6 - exp(-exp(abs(0.99)))
1 - exp(-exp(abs(0.99)))
exp(-exp(abs(0.99)))
1 - exp(-exp(abs(0)))
1 - 0.5*exp(-exp(abs(0)))
1 - 0.2*exp(-exp(abs(0)))
1 - 0.1*exp(-exp(abs(0)))
f <- function(x){
x - 0.1*exp(-exp(abs(1-x)))
}
f(seq(0, 1, 0.01))
plot(f(seq(0, 1, 0.01)), type = "l")
f <- function(x){
0.1 - 0.1*exp(-exp(abs(1-x)))
}
plot(f(seq(0, 1, 0.01)), type = "l")
f <- function(x){
x - 0.1*exp(-exp(abs(1-x)))
}
plot(f(seq(0, 1, 0.01)), type = "l")
plot(f(seq(0.1, 1, 0.01)), type = "l")
f(seq(0.1, 1, 0.01))
f(seq(0.1, 1, 0.01))
f <- function(x){
x - 0.001*exp(-exp(abs(1-x)))
}
f(seq(0.1, 1, 0.01))
f <- function(x){
x - 0.00001*exp(-exp(abs(1-x)))
}
f(seq(0.1, 1, 0.01))
f <- function(x, xmax = 1, b = 0.00001){
x - b*exp(-exp(abs(xmax-x)))
}
#' Bivariate PDF GHI
#' @param x vector of quantiles.
#' @param Ct clear sky radiation
#' @param alpha parameters `alpha > 0`.
#' @param beta parameters `beta > 0` and `alpha + beta < 1`.
#' @param joint_pdf_Yt joint density of Y1_t, Y2_t.
#' @rdname dmvsolarGHI
#' @export
dmvsolarGHI <- function(x, Ct, alpha, beta, joint_pdf_Yt){
if (is.vector(x)) {
x <- matrix(x, nrow = 1)
}
z <- x
z[,1] <- f(z[,1], 1-alpha[1])
z[,1] <- f(z[,2], Ct*(1-alpha[1]-alpha[2]))
z[,1] <- (1 - x[,1] - alpha[1])/beta[1]
z[,2] <- (1 - x[,2]/Ct - alpha[2])/beta[2]
u <- log(-log(z))
# Compute denominator
z_prod <- apply(z, 1, prod)
# Denominator
den <- Ct*prod(beta)*apply(z, 1, prod)*apply(log(z), 1, prod)
# Mixture probabilities
probs <- (1/den)*joint_pdf_Yt(u)
#probs[is.nan(probs)] <- 0
return(probs)
}
dmvsolarGHI(c(0.999, 5.999999999), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
#' Bivariate PDF GHI
#' @param x vector of quantiles.
#' @param Ct clear sky radiation
#' @param alpha parameters `alpha > 0`.
#' @param beta parameters `beta > 0` and `alpha + beta < 1`.
#' @param joint_pdf_Yt joint density of Y1_t, Y2_t.
#' @rdname dmvsolarGHI
#' @export
dmvsolarGHI <- function(x, Ct, alpha, beta, joint_pdf_Yt){
if (is.vector(x)) {
x <- matrix(x, nrow = 1)
}
x[,1] <- f(x[,1], 1-alpha[1])
x[,2] <- f(x[,2], Ct*(1-alpha[1]-alpha[2]))
z <- x
z[,1] <- (1 - x[,1] - alpha[1])/beta[1]
z[,2] <- (1 - x[,2]/Ct - alpha[2])/beta[2]
u <- log(-log(z))
# Compute denominator
z_prod <- apply(z, 1, prod)
# Denominator
den <- Ct*prod(beta)*apply(z, 1, prod)*apply(log(z), 1, prod)
# Mixture probabilities
probs <- (1/den)*joint_pdf_Yt(u)
#probs[is.nan(probs)] <- 0
return(probs)
}
dmvsolarGHI(c(0.999, 5.999999999), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
#' Bivariate PDF GHI
#' @param x vector of quantiles.
#' @param Ct clear sky radiation
#' @param alpha parameters `alpha > 0`.
#' @param beta parameters `beta > 0` and `alpha + beta < 1`.
#' @param joint_pdf_Yt joint density of Y1_t, Y2_t.
#' @rdname dmvsolarGHI
#' @export
dmvsolarGHI <- function(x, Ct, alpha, beta, joint_pdf_Yt){
if (is.vector(x)) {
x <- matrix(x, nrow = 1)
}
x[,1] <- f(x[,1], 1-alpha[1],  0.001)
x[,2] <- f(x[,2], Ct*(1-alpha[1]-alpha[2]), 0.001)
z <- x
z[,1] <- (1 - x[,1] - alpha[1])/beta[1]
z[,2] <- (1 - x[,2]/Ct - alpha[2])/beta[2]
u <- log(-log(z))
# Compute denominator
z_prod <- apply(z, 1, prod)
# Denominator
den <- Ct*prod(beta)*apply(z, 1, prod)*apply(log(z), 1, prod)
# Mixture probabilities
probs <- (1/den)*joint_pdf_Yt(u)
#probs[is.nan(probs)] <- 0
return(probs)
}
dmvsolarGHI(c(0.999, 5.999999999), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.999, 6), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(1, 6), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
#' Bivariate PDF GHI
#' @param x vector of quantiles.
#' @param Ct clear sky radiation
#' @param alpha parameters `alpha > 0`.
#' @param beta parameters `beta > 0` and `alpha + beta < 1`.
#' @param joint_pdf_Yt joint density of Y1_t, Y2_t.
#' @rdname dmvsolarGHI
#' @export
dmvsolarGHI <- function(x, Ct, alpha, beta, joint_pdf_Yt){
if (is.vector(x)) {
x <- matrix(x, nrow = 1)
}
x[,1] <- f(x[,1], 1-alpha[1],  0.001)
x[,2] <- f(x[,2], Ct*(1-alpha[1]-alpha[2]), 0.001)
z <- x
z[,1] <- (1 - x[,1] - alpha[1])/beta[1]
z[,2] <- (1 - x[,2]/Ct - alpha[2])/beta[2]
u <- log(-log(z))
# Compute denominator
z_prod <- apply(z, 1, prod)
# Denominator
den <- Ct*prod(beta)*apply(z, 1, prod)*apply(log(z), 1, prod)
# Mixture probabilities
probs <- (1/den)*joint_pdf_Yt(u)
#probs[is.nan(probs)] <- 0
return(probs)
}
dmvsolarGHI(c(1, 6), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
#' Bivariate PDF GHI
#' @param x vector of quantiles.
#' @param Ct clear sky radiation
#' @param alpha parameters `alpha > 0`.
#' @param beta parameters `beta > 0` and `alpha + beta < 1`.
#' @param joint_pdf_Yt joint density of Y1_t, Y2_t.
#' @rdname dmvsolarGHI
#' @export
dmvsolarGHI <- function(x, Ct, alpha, beta, joint_pdf_Yt){
if (is.vector(x)) {
x <- matrix(x, nrow = 1)
}
x[,1] <- f(x[,1], 1-alpha[1],  0.01)
x[,2] <- f(x[,2], Ct*(1-alpha[1]-alpha[2]), 0.01)
z <- x
z[,1] <- (1 - x[,1] - alpha[1])/beta[1]
z[,2] <- (1 - x[,2]/Ct - alpha[2])/beta[2]
u <- log(-log(z))
# Compute denominator
z_prod <- apply(z, 1, prod)
# Denominator
den <- Ct*prod(beta)*apply(z, 1, prod)*apply(log(z), 1, prod)
# Mixture probabilities
probs <- (1/den)*joint_pdf_Yt(u)
#probs[is.nan(probs)] <- 0
return(probs)
}
dmvsolarGHI(c(1, 6), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0, 6), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0, 0), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.1, 1), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.1, 9.1), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.1, 0.1), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x))
dmvsolarGHI(c(0.1, 0.1), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
dmvsolarGHI(c(0.99, 0.1), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
dmvsolarGHI(c(0.99, 5.1), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
dmvsolarGHI(c(0.99, 5.9), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
dmvsolarGHI(c(0.99, 5.999), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
dmvsolarGHI(c(0.99, 7), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
dmvsolarGHI(c(0.99, 6), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
6 - exp(-exp(abs(0)))
1 - 0.1*exp(-exp(abs(0)))
f <- function(x, xmax = 1, b = 0.00001){
x - b*exp(-exp(abs(xmax-x)))
}
plot(f(seq(0.1, 1, 0.01)), type = "l")
grid <- seq(0.1, 1, 0.01)
n <- 1:length(grid)
ggplot()+
geom_line(aes(n, grid))
ggplot()+
geom_line(aes(n, grid))+
geom_line(aes(n, f(grid)), color="red")
f(grid)
grid
ggplot()+
geom_line(aes(n, grid)-f(grid))
ggplot()+
geom_line(aes(n, grid)-f(grid))
ggplot()+
geom_line(aes(n, grid)-f(grid))
grid <- seq(0.1, 1, 0.01)
n <- 1:length(grid)
ggplot()+
geom_line(aes(n, grid)-f(grid))
ggplot()+
geom_line(aes(n, grid-f(grid)))
#' Bivariate PDF GHI
#' @param x vector of quantiles.
#' @param Ct clear sky radiation
#' @param alpha parameters `alpha > 0`.
#' @param beta parameters `beta > 0` and `alpha + beta < 1`.
#' @param joint_pdf_Yt joint density of Y1_t, Y2_t.
#' @rdname dmvsolarGHI
#' @export
dmvsolarGHI <- function(x, Ct, alpha, beta, joint_pdf_Yt){
if (is.vector(x)) {
x <- matrix(x, nrow = 1)
}
x[,1] <- f(x[,1], 1-alpha[1],  0.001)
x[,2] <- f(x[,2], Ct*(1-alpha[1]-alpha[2]), 0.001)
z <- x
z[,1] <- (1 - x[,1] - alpha[1])/beta[1]
z[,2] <- (1 - x[,2]/Ct - alpha[2])/beta[2]
u <- log(-log(z))
# Compute denominator
z_prod <- apply(z, 1, prod)
# Denominator
den <- Ct*prod(beta)*apply(z, 1, prod)*apply(log(z), 1, prod)
# Mixture probabilities
probs <- (1/den)*joint_pdf_Yt(u)
#probs[is.nan(probs)] <- 0
return(probs)
}
dmvsolarGHI(c(0.99, 6), 6, c(0, 0), c(1, 1),  function(x) mvtnorm::dmvnorm(x, mean = c(-1,1)))
6 - exp(-exp(abs(0)))
1 - 0.1*exp(-exp(abs(0)))
f <- function(x, xmax = 1, b = 0.00001){
x - b*exp(-exp(abs(xmax-x)))
}
grid <- seq(0.1, 1, 0.01)
n <- 1:length(grid)
ggplot()+
geom_line(aes(n, grid-f(grid)))
ggplot()+
geom_line(aes(n, grid-f(grid)))
f <- function(x, xmax = 1, b = 0.001){
x - b*exp(-exp(abs(xmax-x)))
}
grid <- seq(0.1, 1, 0.01)
n <- 1:length(grid)
ggplot()+
geom_line(aes(n, grid-f(grid)))
f <- function(x, xmax = 1, b = 0.01){
x - b*exp(-exp(abs(xmax-x)))
}
grid <- seq(0.1, 1, 0.01)
n <- 1:length(grid)
ggplot()+
geom_line(aes(n, grid-f(grid)))
exp(-exp(3))
exp(-exp(1))
exp(-exp(0.5/2))
0.1*exp(-exp(0.5/2))
0.1*exp(-exp(0.5))
0.1*exp(-exp(-0.5))
0.1*exp(-exp(0.1))
0.1*exp(-exp(0.9))
0.1*exp(-exp(0.99))
0.1*exp(-exp(1))
exp(-exp(1))
exp(-exp(1))
exp(-exp(1))/0.06598804
exp(-exp(0.3))/0.06598804
devtools::document()
spec <- solarModel_spec("Bologna", from="2005-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
library(solarr)
control <- control_solarModel(outliers_quantile = 0.005)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
save(Bologna, file = "data/Bologna.RData")
devtools::document()
library(solarr)
library(solarr)
rm(Bologna)
model <- Bologna
solarOption_historical(model)
