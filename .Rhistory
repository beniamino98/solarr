seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
seasonal_solar
model_Ct <- lm(Ct ~ declination + zenit_angle, data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
model_Ct <- lm(Ct ~ declination + alpha_max, data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ declination + I(declination^2), data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ declination + I(declination^2)-1, data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ H0 + declination + I(declination^2), data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ H0 + declination, data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
seasonal_solar
ssf$H0(1:366, Bologna$coords$lat)
seasonal_solar
seasonal_solar <- left_join(seasonal_solar, ssf$H0(1:366, Bologna$coords$lat), by = c("n", "lat"))
seasonal_solar <- dplyr::left_join(seasonal_solar, ssf$H0(1:366, Bologna$coords$lat), by = c("n", "lat"))
model_Ct <- lm(Ct ~ H0 + declination, data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(I(Ct/H0) ~ declination, data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, Ct))
seasonal_solar
model_Ct <- lm(Ct ~ declination + I(exp(cosZ)), data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, Ct))
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
ggplot(seasonal_solar)+
geom_line(aes(0:365, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
ggplot(seasonal_solar)+
geom_line(aes(0:365, Ct_hat), color = "red")+
geom_line(aes(0:365, Ct))
Bologna$seasonal_data
seasonal_solar <- Bologna$seasonal_data
seasonal_solar
seasonal_solar <- ssf$angle_minmax(1:366, Bologna$coords$lat)
seasonal_solar
ssf$angle_minmax(59.5, Bologna$coords$lat)
seasonal_solar <- Bologna$seasonal_data
seasonal_solar <- dplyr::left_join(seasonal_solar, ssf$angle_minmax(seasonal_solar$n, Bologna$coords$lat), by = c("n"))
View(seasonal_solar)
seasonal_solar <- dplyr::left_join(seasonal_solar, ssf$H0(seasonal_solar$n, Bologna$coords$lat), by = c("n", "lat"))
seasonal_solar$Ct <- Bologna$seasonal_model_Ct$predict(seasonal_solar$n)
model_Ct <- lm(Ct ~ declination + I(exp(cosZ)), data = seasonal_solar)
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(0:365, Ct_hat), color = "red")+
geom_line(aes(0:365, Ct))
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct
model_Ct <- lm(Ct ~ declination, data = seasonal_solar)
model_Ct
df_fit <- seasonal_solar
df_fit$declination <- ssf$radiant(df_fit$declination)
model_Ct <- lm(Ct ~ I(sin(declination)), data = df_fit)
model_Ct
model_Ct <- lm(Ct ~ I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ I(H0*sin(declination)) + I(H0*cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
df_fit$declination
df_fit <- seasonal_solar
model_Ct <- lm(Ct ~ I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ n + I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
df_fit$declination <- ssf$radiant(df_fit$declination)
model_Ct <- lm(Ct ~ n + I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ I(sin((2*base::pi*declination)/365)) + I(cos((2*base::pi*declination)/365))), data = df_fit)
model_Ct
df_fit$declination <- (2*base::pi*ssf$radiant(df_fit$declination))/365
model_Ct <- lm(Ct ~ I(sin(declination) + I(cos(declination)), data = df_fit)
model_Ct <- lm(Ct ~ I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct <- lm(Ct ~ I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
df_fit <- seasonal_solar
df_fit$declination <- (2*base::pi*ssf$radiant(df_fit$declination))/365
model_Ct <- lm(Ct ~ I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
df_fit <- seasonal_solar
df_fit$declination <- (2*base::pi*ssf$radiant(df_fit$declination))/365
ssf$radiant(df_fit$declination)
ssf$radiant(df_fit$declination)
df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(Ct ~ I(sin(declination)) + I(cos(declination)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ declination, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
df_fit <- seasonal_solar
model_Ct <- lm(Ct ~ declination, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct <- lm(Ct ~ H0 + declination, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct
# Model specification
spec <- solarModel_spec("Parma", from="2005-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
ssf <- seasonalSolarFunctions$new("spencer")
seasonal_solar <- ssf$angle_minmax(1:366, Bologna$coords$lat)
ssf$angle_minmax(seasonal_solar$n, Bologna$coords$lat)
seasonal_solar <- Bologna$seasonal_data
seasonal_solar <- dplyr::left_join(seasonal_solar, ssf$angle_minmax(seasonal_solar$n, Bologna$coords$lat), by = c("n"))
seasonal_solar <- dplyr::left_join(seasonal_solar, ssf$H0(seasonal_solar$n, Bologna$coords$lat), by = c("n", "lat"))
seasonal_solar$Ct <- Bologna$seasonal_model_Ct$predict(seasonal_solar$n)
df_fit <- seasonal_solar
df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(Ct ~ H0 + declination, data = df_fit)
model_Ct
df_fit <- seasonal_solar
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(Ct ~ H0 + declination, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
seasonal_solar
seasonal_solar <- Bologna$seasonal_data
seasonal_solar <- dplyr::left_join(seasonal_solar, ssf$angle_minmax(seasonal_solar$n, Bologna$coords$lat), by = c("n"))
seasonal_solar <- dplyr::left_join(seasonal_solar, ssf$H0(seasonal_solar$n, Bologna$coords$lat), by = c("n", "lat"))
seasonal_solar
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(Ct ~ H0 + declination + cosZ, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(Ct ~ declination + cosZ, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(Ct ~ declination + cosZ, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
model_Ct$coefficients
model_Ct$coefficients[2] <- 0.16
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination + cosZ, data = df_fit)
model_Ct
model_Ct$coefficients[2] <- 0.16
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, Ct))
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination, data = df_fit)
model_Ct
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination + H0, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination + I(H0^2), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination + I(sqrt(H0)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
model_Ct
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination + I(sqrt(H0))-1, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ declination + I(sqrt(H0)), data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(I(GHI_bar/H0) ~ declination, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar*H0))
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, GHI_bar))
df_fit
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(I(GHI_bar/H0) ~ declination + sun_hours, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(I(GHI_bar/H0) ~ declination + G0n, data = df_fit)
model_Ct
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, GHI_bar))
df_fit
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(I(GHI_bar/H0) ~ zenit_angle, data = df_fit)
model_Ct
df_fit
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(I(GHI_bar/H0) ~ zenit_angle + G0n, data = df_fit)
model_Ct
df_fit
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ H0 + zenit_angle + G0n, data = df_fit)
model_Ct
df_fit
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat*H0), color = "red")+
geom_line(aes(n, GHI_bar))
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
#df_fit$declination <- (ssf$radiant(df_fit$declination))/sum(ssf$radiant(df_fit$declination))
model_Ct <- lm(GHI_bar ~ I(sqrt(H0)) + zenit_angle + G0n, data = df_fit)
model_Ct
df_fit
seasonal_solar$Ct_hat <- predict(model_Ct, newdata = seasonal_solar)
ggplot(seasonal_solar)+
geom_line(aes(n, Ct_hat), color = "red")+
geom_line(aes(n, GHI_bar))
-10.0642       2.1235      -0.2489
sm <- seasonalModel$new()
seasonalModel$public_methods$fit()
59.5 %% 365
seasonalModel <- R6::R6Class("seasonalModel",
public = list(
#' @field seasonal_data Slot that contains eventual externals seasonal regressors used for fitting.
seasonal_data = dplyr::tibble(n = c(seq(1, 59), 59.5, seq(60, 365))),
#' @field extra_params Slot used for containing eventual extra parameters.
extra_params = list(),
#' @method initialize seasonalModel
#' @description
#' Initialize the seasonalModel.
#' @param order numeric, number of sine and cosine used in fitting.
#' @param period numeric, seasonal periodicity. The default is \eqn{\frac{2\pi}{365}}.
initialize = function(order = 1, period = 365){
# Store period and order
private$..period = period
private$..order = order
},
#' @method fit seasonalModel
#' @description
#' Fit a seasonal model as a linear combination of sine and cosine functions and
#' eventual external regressors specified in the formula. The external regressors used should
#' have the same periodicity, i.e. not stochastic regressors are allowed.
#' @param formula formula, an object of class `formula` (or one that can be coerced to that class).
#' It is a symbolic description of the model to be fitted and can be used to include or exclude the intercept or external regressors in `data`.
#' @param data 	an optional data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables in the model.
#' If not found in data, the variables are taken from environment(formula), typically the environment from which `lm` is called.
#' @param ... other parameters to be passed to the function lm.
fit = function(formula, data, ...){
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " + ", "cos((2*base::pi)/", eval(self$period), "*n*", i, ")", " + ",
"sin((2*base::pi)/", eval(self$period), "*n*", i, ")")
}
}
# Store the formula
private$formula <- as.formula(formula)
# Fit seasonal model
private$..model <- lm(private$formula, data = data, ...)
# Extract external seasonal regressors
external_regressors <- formula.tools::get.vars(formula(private$..model))[-c(1)]
external_regressors <- external_regressors[!stringr::str_detect(external_regressors, "cos|sin")]
# Store external seasonal regressors inside `seasonal_data` slot
if (!purrr::is_empty(external_regressors)) {
external_regressors <- data[, c("n", external_regressors)]
external_regressors <- external_regressors[!duplicated(external_regressors$n),]
self$seasonal_data <- dplyr::left_join(self$seasonal_data, external_regressors, by = c("n"))
}
},
#' @method predict seasonalModel
#' @description
#' Predict method for a `seasonalModel`,
#' @param n integer, number of day of the year.
predict = function(n){
if (missing(n)){
predict.lm(private$..model)
} else {
n <- number_of_day(n)
newdata <- data.frame(n = n %% self$period)
newdata$n <- ifelse(newdata$n == 0, 1, newdata$n)
# Add the external regressors only when specified
if (ncol(self$seasonal_data) > 1) {
newdata <- dplyr::left_join(newdata, self$seasonal_data, by = "n")
}
predict.lm(private$..model, newdata = newdata)
}
},
#' @method update seasonalModel
#' @description
#' Update the parameters of a `seasonalModel`.
#' @param coefficients vector of parameters.
update = function(coefficients){
old_coef <- self$coefficients
# Check length
if (length(old_coef) != length(coefficients)) {
warning("The lenght of `coefficients` do not match the length of the old coefficients.")
return(invisible(NULL))
}
# Update parameters
private$..model$coefficients <- coefficients
}
),
private = list(
..model = NA,
formula = NA,
..period = 1,
..order = 365
),
active = list(
#' @field coefficients A vector containing the estimated coefficients
coefficients = function(){
private$..model$coefficients
},
#' @field model The `lm` object.
model = function(){
private$..model
},
#' @field period The length of the seasonal period in days.
period = function(){
private$..period
},
#' @field order The order of the combination
order = function(){
private$..order
}
)
)
sm_upd <- seasonalModel$new()
sm$predict()
sm$predict
sm_upd$predict
sm_upd$.__enclos_env__$self$predict <- sm_upd$predict
seasonalModel$lock_class
seasonalModel$lock_objects
seasonalModel$lock_objects <- FALSE
sm_upd$.__enclos_env__$self$predict <- sm_upd$predict
sm_upd <- seasonalModel$new()
sm_upd$.__enclos_env__$self$predict <- sm$predict
rm(list = ls())
sm <- seasonalModel$new()
sm$update()
sm$update
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(solarr)
library(solarr)
# Control list
control <- control_solarModel(outliers_quantile = 0.005)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
scen <- solarScenario(model, "2010-01-01", to = "2020-12-31", nsim = 10)
model <- Bologna
scen <- solarScenario(model, "2010-01-01", to = "2020-12-31", nsim = 10)
model <- Bologna
simSpec <- solarScenario_spec(model)
simSpec <- solarScenario_residuals(simSpec, nsim = 10)
simSpec <- solarScenario_filter(simSpec)
# Empiric data
df_emp <- simSpec$emp
# First simulation
df_sim <- simSpec$simulations[[1]]
ggplot()+
geom_line(data = df_emp, aes(date, GHI))+
geom_line(data = df_sim, aes(date, GHI), color = "red")
control_options <- control_solarOption(put = FALSE)
df_call <- solarOption_model(model, control_options = control_options)
control_options <- control_solarOption(put = TRUE)
df_put <- solarOption_model(model, control_options = control_options)
df_put
df_call
