}
t_now <- as.Date("2013-01-01")
t_hor <- "2014-01-01"
mom <- radiationModel_moments(model_Rt, t_now-300, t_hor, n.ahead = 300)
mom <- filter(mom, lubridate::year(date) == 2013)
# premium_1 <- solarOption_model(model_Rt$model, mom)
# premium_2 <- solarOption_model(model_Rt$model, mom)
premium_3 <- solarOption_model(model_Rt$model, mom)
#solarOption_model(model_Rt$model, model_Rt$model$Moments(mom$date[1]-100, mom$date))
premium_1
premium_2
premium_3
solarOption_historical(model_Rt$model, control_options = control_solarOption(nyears = c(2005, 2023)))
premium_h <- solarOption_historical(model_Rt$model, control_options = control_solarOption(nyears = c(2005, 2023)))
premium_1$payoff_month$premium - premium_h$payoff_month$premium
(premium_1$payoff_month$premium - premium_h$payoff_month$premium)^2
sum((premium_1$payoff_month$premium - premium_h$payoff_month$premium)^2)
sum((premium_2$payoff_month$premium - premium_h$payoff_month$premium)^2)
sum((premium_3$payoff_month$premium - premium_h$payoff_month$premium)^2)
library(solarr)
# Model specification
spec <- solarModel_spec$new()
spec$set_params(min_pos = 1, max_pos = 1, transform_delta = 0.05)
spec$set_mean.model(arOrder = 1, maOrder = 0)
spec$set_seasonal.mean(monthly.mean = FALSE)
spec$set_seasonal.variance(monthly.mean = FALSE)
spec$set_mixture.model(match.moments = FALSE, method = "mixtools")
spec$set_variance.model(garchOrder = 0, archOrder = 0)
spec$specification("Bologna", min_date="2005-01-01", from = "2005-01-01", to = "2023-12-31", max_date = "2023-12-31")
# Model fit
model <- solarModel$new(spec)
model$fit()
model_Rt <- radiationModel$new(model, correction = FALSE)
self <- model_Rt$.__enclos_env__$self
private <- model_Rt$.__enclos_env__$private
radiationModel_moments <- function(model_Rt, t_now, t_hor, n.ahead = 60){
if (missing(t_now)) {
t_now <- model_Rt$model$dates$data$from
t_hor <- model_Rt$model$dates$data$to
} else {
t_now <- as.Date(t_now)
t_hor <- as.Date(t_hor)
}
# Radiation model
model <- model_Rt$clone(deep = TRUE)
data <- dplyr::filter(model$model$data, date >= t_now & date <= t_hor)
# Add strike price
data$strike <- data$GHI_bar
# Add strike price in terms of Y
data$K_Y <- model$model$R_to_Y(data$strike, data$date)
# Add realized payoff
data$payoff <- (data$strike - data$GHI) * ifelse(data$strike > data$GHI, 1, 0)
data_test <- dplyr::filter(data, date >= t_now + n.ahead & date <= t_hor)
# Expectations
M_Y <- purrr::map(data_test$date, ~unlist(model$M_Y(dplyr::filter(data, date == .x - n.ahead)$GHI, .x-n.ahead, .x)))
# Variances
#S_Y <- purrr::map(data_test$date, ~unlist(model$S_Y(.x-n.ahead, .x)))
S_Y <- purrr::map(data_test$date, ~unlist(model$e_mix_diffusion(.x-n.ahead, .x)))
dplyr::tibble(
date = data_test$date,
Year = lubridate::year(data_test$date),
Month = lubridate::month(data_test$date),
Day = lubridate::day(data_test$date),
e_Yt = purrr::map_dbl(M_Y, ~.x[3]),
sd_Yt = sqrt(purrr::map_dbl(S_Y, ~.x["common_variance"])),
M_Y1 = purrr::map_dbl(M_Y, ~.x[1]),
S_Y1 = sqrt(purrr::map_dbl(S_Y, ~.x[1])),
M_Y0 = purrr::map_dbl(M_Y, ~.x[2]),
S_Y0 = sqrt(purrr::map_dbl(S_Y, ~.x[2])),
p1 = data_test$p1,
Ct = data_test$Ct,
GHI_bar = data_test$GHI_bar,
alpha = model$model$transform$alpha,
beta = model$model$transform$beta
)
}
t_now <- as.Date("2013-01-01")
t_hor <- "2014-01-01"
mom <- radiationModel_moments(model_Rt, t_now-300, t_hor, n.ahead = 300)
mom <- filter(mom, lubridate::year(date) == 2013)
premium_1 <- solarOption_model(model_Rt$model, mom)
model_Rt <- radiationModel$new(model, correction = TRUE)
self <- model_Rt$.__enclos_env__$self
private <- model_Rt$.__enclos_env__$private
radiationModel_moments <- function(model_Rt, t_now, t_hor, n.ahead = 60){
if (missing(t_now)) {
t_now <- model_Rt$model$dates$data$from
t_hor <- model_Rt$model$dates$data$to
} else {
t_now <- as.Date(t_now)
t_hor <- as.Date(t_hor)
}
# Radiation model
model <- model_Rt$clone(deep = TRUE)
data <- dplyr::filter(model$model$data, date >= t_now & date <= t_hor)
# Add strike price
data$strike <- data$GHI_bar
# Add strike price in terms of Y
data$K_Y <- model$model$R_to_Y(data$strike, data$date)
# Add realized payoff
data$payoff <- (data$strike - data$GHI) * ifelse(data$strike > data$GHI, 1, 0)
data_test <- dplyr::filter(data, date >= t_now + n.ahead & date <= t_hor)
# Expectations
M_Y <- purrr::map(data_test$date, ~unlist(model$M_Y(dplyr::filter(data, date == .x - n.ahead)$GHI, .x-n.ahead, .x)))
# Variances
#S_Y <- purrr::map(data_test$date, ~unlist(model$S_Y(.x-n.ahead, .x)))
S_Y <- purrr::map(data_test$date, ~unlist(model$e_mix_diffusion(.x-n.ahead, .x)))
dplyr::tibble(
date = data_test$date,
Year = lubridate::year(data_test$date),
Month = lubridate::month(data_test$date),
Day = lubridate::day(data_test$date),
e_Yt = purrr::map_dbl(M_Y, ~.x[3]),
sd_Yt = sqrt(purrr::map_dbl(S_Y, ~.x["common_variance"])),
M_Y1 = purrr::map_dbl(M_Y, ~.x[1]),
S_Y1 = sqrt(purrr::map_dbl(S_Y, ~.x[1])),
M_Y0 = purrr::map_dbl(M_Y, ~.x[2]),
S_Y0 = sqrt(purrr::map_dbl(S_Y, ~.x[2])),
p1 = data_test$p1,
Ct = data_test$Ct,
GHI_bar = data_test$GHI_bar,
alpha = model$model$transform$alpha,
beta = model$model$transform$beta
)
}
t_now <- as.Date("2013-01-01")
t_hor <- "2014-01-01"
mom <- radiationModel_moments(model_Rt, t_now-300, t_hor, n.ahead = 300)
mom <- filter(mom, lubridate::year(date) == 2013)
# premium_1 <- solarOption_model(model_Rt$model, mom)
premium_2 <- solarOption_model(model_Rt$model, mom)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/radiationModel.R")
model_Rt <- radiationModel$new(model, correction = TRUE)
self <- model_Rt$.__enclos_env__$self
private <- model_Rt$.__enclos_env__$private
radiationModel_moments <- function(model_Rt, t_now, t_hor, n.ahead = 60){
if (missing(t_now)) {
t_now <- model_Rt$model$dates$data$from
t_hor <- model_Rt$model$dates$data$to
} else {
t_now <- as.Date(t_now)
t_hor <- as.Date(t_hor)
}
# Radiation model
model <- model_Rt$clone(deep = TRUE)
data <- dplyr::filter(model$model$data, date >= t_now & date <= t_hor)
# Add strike price
data$strike <- data$GHI_bar
# Add strike price in terms of Y
data$K_Y <- model$model$R_to_Y(data$strike, data$date)
# Add realized payoff
data$payoff <- (data$strike - data$GHI) * ifelse(data$strike > data$GHI, 1, 0)
data_test <- dplyr::filter(data, date >= t_now + n.ahead & date <= t_hor)
# Expectations
M_Y <- purrr::map(data_test$date, ~unlist(model$M_Y(dplyr::filter(data, date == .x - n.ahead)$GHI, .x-n.ahead, .x)))
# Variances
#S_Y <- purrr::map(data_test$date, ~unlist(model$S_Y(.x-n.ahead, .x)))
S_Y <- purrr::map(data_test$date, ~unlist(model$e_mix_diffusion(.x-n.ahead, .x)))
dplyr::tibble(
date = data_test$date,
Year = lubridate::year(data_test$date),
Month = lubridate::month(data_test$date),
Day = lubridate::day(data_test$date),
e_Yt = purrr::map_dbl(M_Y, ~.x[3]),
sd_Yt = sqrt(purrr::map_dbl(S_Y, ~.x["common_variance"])),
M_Y1 = purrr::map_dbl(M_Y, ~.x[1]),
S_Y1 = sqrt(purrr::map_dbl(S_Y, ~.x[1])),
M_Y0 = purrr::map_dbl(M_Y, ~.x[2]),
S_Y0 = sqrt(purrr::map_dbl(S_Y, ~.x[2])),
p1 = data_test$p1,
Ct = data_test$Ct,
GHI_bar = data_test$GHI_bar,
alpha = model$model$transform$alpha,
beta = model$model$transform$beta
)
}
t_now <- as.Date("2013-01-01")
t_hor <- "2014-01-01"
mom <- radiationModel_moments(model_Rt, t_now-300, t_hor, n.ahead = 300)
mom <- filter(mom, lubridate::year(date) == 2013)
# premium_1 <- solarOption_model(model_Rt$model, mom)
# premium_2 <- solarOption_model(model_Rt$model, mom)
premium_3 <- solarOption_model(model_Rt$model, mom)
#solarOption_model(model_Rt$model, model_Rt$model$Moments(mom$date[1]-100, mom$date))
premium_1
premium_2
premium_3
premium_h <- solarOption_historical(model_Rt$model, control_options = control_solarOption(nyears = c(2005, 2023)))
sum((premium_1$payoff_month$premium - premium_h$payoff_month$premium)^2)
sum((premium_2$payoff_month$premium - premium_h$payoff_month$premium)^2)
sum((premium_3$payoff_month$premium - premium_h$payoff_month$premium)^2)
#solarOption_model(model_Rt$model, model_Rt$model$Moments(mom$date[1]-100, mom$date))
premium_1
premium_2
premium_3
premium_h <- solarOption_historical(model_Rt$model, control_options = control_solarOption(nyears = c(2005, 2023)))
sum((premium_1$payoff_month$premium - premium_h$payoff_month$premium)^2)
sum((premium_2$payoff_month$premium - premium_h$payoff_month$premium)^2)
sum((premium_3$payoff_month$premium - premium_h$payoff_month$premium)^2)
premium_2
premium_3
premium_h
#solarOption_model(model_Rt$model, model_Rt$model$Moments(mom$date[1]-100, mom$date))
premium_1
premium_3
premium_h
library(solarr)
log(self$model$ARMA$coefficients[2])
martingale_method_seasonal(df_fit$Yt, df_fit$Yt_bar)
# Store the discrete model
private$..model <- model$clone(TRUE)
# 1) Estimate mean reversion parameter
df_fit <- filter(private$..model$data, isTrain & weights != 0)
df_fit
martingale_method_seasonal(df_fit$Yt, df_fit$Yt_bar)
log(-0.9517039)
log(0.9517039)
exp(-0.9517039)
self$model$ARMA$coefficients[2]
-log(self$model$ARMA$coefficients[2])
model$update(phi_1 = 0.4)
model$update(c(phi_1 = 0.4))
self <- model$.__enclos_env__$self
private <- model$.__enclos_env__$private
# Arguments
control <- self$spec
target <- self$target
# **************************************************** #
# Update seasonal mean of Yt
private$..data[["Yt_bar"]] <- self$seasonal_model_Yt$predict(newdata = private$..data)
# Update seasonal mean of target variable
private$..data[[paste0(target, "_bar")]] <- self$transform$GHI_y(private$..data[["Yt_bar"]], self$data[["Ct"]])
# Update Yt_tilde
private$..data[["Yt_tilde"]] <- private$..data[["Yt"]] - private$..data$Yt_bar
# Fit the corrective mean
self$fit_monthly_mean()
# Update Yt_tilde_hat
eps0 <- c()
if (self$ARMA$order[2] > 0) {
eps0 <- self$ARMA$model$residuals[1:self$ARMA$order[2]]
}
private$..data[["Yt_tilde_hat"]] <- self$ARMA$filter(private$..data[["Yt_tilde"]], eps0 = eps0)$fitted
# Update ARMA residuals
private$..data[["eps"]] <- private$..data[["Yt_tilde"]] - private$..data[["Yt_tilde_hat"]]
# **************************************************** #
# Update seasonal std. deviation
private$..data[["sigma_bar"]] <- sqrt(self$seasonal_variance$predict(newdata = private$..data))
# Update standardized residuals
private$..data[["eps_tilde"]] <- private$..data[["eps"]] / private$..data[["sigma_bar"]]
# Compute corrective monthly variance
self$fit_monthly_variance()
# Correct the seasonal variance
self$correct_seasonal_variance()
# **************************************************** #
# Update Garch standard deviation
private$..data[["sigma"]] <- self$GARCH$filter(private$..data[["eps_tilde"]])$sigma
self$GARCH
self$GARCH$filter(private$..data[["eps_tilde"]])
self <- model$GARCH$.__enclos_env__$self
# GARCH specification
spec <- self$spec
coefficients <- self$coefficients
private <- model$GARCH$.__enclos_env__$private
# Remove intercept if unconditional variance is constrained
if (!is.na(private$..sigma20)) {
coefficients <- coefficients[!stringr::str_detect(names(coefficients), "omega")]
}
# Remove arch component if not present
if (self$order[1] == 0){
coefficients <- coefficients[!stringr::str_detect(names(coefficients), "alpha")]
}
# Remove garch component if not present
if (self$order[2] == 0){
coefficients <- coefficients[!stringr::str_detect(names(coefficients), "beta")]
}
coefficients
coefficients
# Update parameters in the specification
spec@model$fixed.pars <- c(omega = 1)
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x, ...)@filter
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter
x <- model$data$eps_tilde
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter$sigma
spec@model$fixed.pars
# GARCH specification
spec <- self$spec
spec
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter$sigma
spec@model$fixed.pars
# Update parameters in the specification
spec@model$fixed.pars <- c(omega = 1)
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter$sigma
# Update parameters in the specification
spec@model$fixed.pars <- c(omega = 1.2)
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter$sigma
# Update parameters in the specification
spec@model$fixed.pars <- c(omega = 1.2)
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter$sigma
# Update parameters in the specification
spec@model$fixed.pars <- c(omega = 1.2, alpha = 0)
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter$sigma
# Update parameters in the specification
spec@model$fixed.pars <- NULL
# GARCH filter
rugarch::ugarchfilter(spec = spec, data = x)@filter$sigma
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
# Model specification
spec <- solarModel_spec$new()
spec$set_params(min_pos = 1, max_pos = 1, transform_delta = 0.05)
spec$set_mean.model(arOrder = 1, maOrder = 0)
spec$set_seasonal.mean(monthly.mean = FALSE)
spec$set_seasonal.variance(monthly.mean = FALSE)
spec$set_mixture.model(match.moments = FALSE, method = "mixtools")
spec$set_variance.model(garchOrder = 0, archOrder = 0)
spec$specification("Bologna", min_date="2005-01-01", from = "2005-01-01", to = "2023-12-31", max_date = "2023-12-31")
# Model fit
model <- solarModel$new(spec)
model$fit()
model$update(c(phi_1 = 0.3))
model$filter()
library(solarr)
# Model specification
spec <- solarModel_spec$new()
spec$set_params(min_pos = 1, max_pos = 1, transform_delta = 0.05)
spec$set_mean.model(arOrder = 1, maOrder = 0)
spec$set_seasonal.mean(monthly.mean = FALSE)
spec$set_seasonal.variance(monthly.mean = FALSE)
spec$set_mixture.model(match.moments = TRUE, method = "mixtools")
spec$set_variance.model(garchOrder = 0, archOrder = 0)
spec$specification("Bologna", min_date="2005-01-01", from = "2005-01-01", to = "2023-12-31", max_date = "2023-12-31")
# Model fit
model <- solarModel$new(spec)
model$fit()
solarrfigs::fig_acf(model$data$u_tilde^2)
solarModel_tests(model, lag.max = 120)
Box.test(model$data$u_tilde^2, lag = 2)
#model$NM_model$use_empiric_parameters()
model$NM_model$moments
sig <- model$data$sigma_bar[1:365]^2
plot(exp(0.5*sig))
model_Rt <- radiationModel$new(model, correction = TRUE)
self <- model_Rt$.__enclos_env__$self
private <- model_Rt$.__enclos_env__$private
radiationModel_moments <- function(model_Rt, t_now, t_hor, n.ahead = 60){
if (missing(t_now)) {
t_now <- model_Rt$model$dates$data$from
t_hor <- model_Rt$model$dates$data$to
} else {
t_now <- as.Date(t_now)
t_hor <- as.Date(t_hor)
}
# Radiation model
model <- model_Rt$clone(deep = TRUE)
data <- dplyr::filter(model$model$data, date >= t_now & date <= t_hor)
# Add strike price
data$strike <- data$GHI_bar
# Add strike price in terms of Y
data$K_Y <- model$model$R_to_Y(data$strike, data$date)
# Add realized payoff
data$payoff <- (data$strike - data$GHI) * ifelse(data$strike > data$GHI, 1, 0)
data_test <- dplyr::filter(data, date >= t_now + n.ahead & date <= t_hor)
# Expectations
M_Y <- purrr::map(data_test$date, ~unlist(model$M_Y(dplyr::filter(data, date == .x - n.ahead)$GHI, .x-n.ahead, .x)))
# Variances
#S_Y <- purrr::map(data_test$date, ~unlist(model$S_Y(.x-n.ahead, .x)))
S_Y <- purrr::map(data_test$date, ~unlist(model$e_mix_diffusion(.x-n.ahead, .x)))
dplyr::tibble(
date = data_test$date,
Year = lubridate::year(data_test$date),
Month = lubridate::month(data_test$date),
Day = lubridate::day(data_test$date),
e_Yt = purrr::map_dbl(M_Y, ~.x[3]),
sd_Yt = sqrt(purrr::map_dbl(S_Y, ~.x["common_variance"])),
M_Y1 = purrr::map_dbl(M_Y, ~.x[1]),
S_Y1 = sqrt(purrr::map_dbl(S_Y, ~.x[1])),
M_Y0 = purrr::map_dbl(M_Y, ~.x[2]),
S_Y0 = sqrt(purrr::map_dbl(S_Y, ~.x[2])),
p1 = data_test$p1,
Ct = data_test$Ct,
GHI_bar = data_test$GHI_bar,
alpha = model$model$transform$alpha,
beta = model$model$transform$beta
)
}
t_now <- as.Date("2013-01-01")
t_hor <- "2014-01-01"
mom <- radiationModel_moments(model_Rt, t_now-300, t_hor, n.ahead = 300)
mom <- filter(mom, lubridate::year(date) == 2013)
premium_1 <- solarOption_model(model_Rt$model, mom)
#solarOption_model(model_Rt$model, model_Rt$model$Moments(mom$date[1]-100, mom$date))
premium_1
premium_2
premium_3
premium_h <- solarOption_historical(model_Rt$model, control_options = control_solarOption(nyears = c(2005, 2023)))
sum((premium_1$payoff_month$premium - premium_h$payoff_month$premium)^2)
premium_h
premium_1
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, M_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, M_Y0), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, M_Y1))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, M_Y1), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, S_Y0), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y1))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, S_Y1), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y1))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, p1), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, p1))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, p1), color = "red")
mom
model_Rt$.__enclos_env__$private$..k1
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y1))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, S_Y1), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, S_Y0), color = "red")
mom
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, sd_Yt))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, S_Y1), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, sd_Yt))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, sd_Yt), color = "red")
model$moments$unconditional[1:365,]$sd_Yt/mom[1:365,]$sd_Yt
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y1))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, S_Y1), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, sd_Yt))+
geom_line(data = model$moments$unconditional[1:365,], aes(1:365, sd_Yt), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, S_Y0), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, S_Y0*0.93), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, S_Y0*sqrt(0.93)), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, S_Y0), color = "red")
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, M_Y1))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, M_Y1), color = "red")
model$moments$unconditional[1:365,]$sd_Yt/mom[1:365,]$M_Y1
model$moments$unconditional[1:365,]$M_Y1/mom[1:365,]$M_Y1
ggplot()+
geom_line(data = mom[1:365,], aes(1:365, S_Y0))+
geom_line(data = model_Rt$model$moments$unconditional[1:365,], aes(1:365, S_Y0), color = "red")
create_monthly_sequence(t_now, t_hor, last_day = TRUE)
df_dates <- create_monthly_sequence(t_now, t_hor, last_day = TRUE)
df <- create_monthly_sequence(t_now, t_hor, last_day = TRUE)
model_Rt$.__enclos_env__$private$..integral_expectation(df$n, df$N, df$tau)
df$int <- model_Rt$.__enclos_env__$private$..integral_expectation(df$n, df$N, df$tau)
df
df <- create_monthly_sequence("2022-12-31", "2023-12-31", last_day = TRUE)
df$int <- model_Rt$.__enclos_env__$private$..integral_expectation(df$n, df$N, df$tau)
df
model_Rt$.__enclos_env__$private$..integral_expectation(1, 30, 300)
model_Rt$.__enclos_env__$private$..integral_expectation(1, 30, 30)
model_Rt$.__enclos_env__$private$..integral_expectation(1, 90, 90)
model_Rt$.__enclos_env__$private$..integral_expectation(1, 120, 120)
model_Rt$.__enclos_env__$private$..integral_variance(1, 120, 120)
model_Rt$.__enclos_env__$private$..integral_variance(119, 120, 120)
model_Rt$.__enclos_env__$private$..integral_expectation(119, 120, 120)
df
model_Rt$.__enclos_env__$private$..integral_expectation(729, 730, 730)
model_Rt$.__enclos_env__$private$..integral_variance(729, 730, 730)
model_Rt$.__enclos_env__$private$..integral_variance(729, 730, 730)^2
model_Rt$.__enclos_env__$private$..integral_variance(729, 730, 730)^(0.5)
model_Rt$.__enclos_env__$private$..integral_expectation(729, 730, 730)
model_Rt$.__enclos_env__$private$..integral_expectation(429, 430, 430)
model_Rt$.__enclos_env__$private$..integral_variance(429, 430, 430)^(0.5)
0.9779987/0.9437252
model_Rt$.__enclos_env__$private$..integral_expectation(429, 430, 430)*1.036317
model_Rt$.__enclos_env__$private$..integral_variance(429, 430, 430)^(0.5)
model_Rt$.__enclos_env__$private$..integral_expectation(529, 530, 530)*1.036317
model_Rt$.__enclos_env__$private$..integral_variance(529, 530, 530)^(0.5)
model_Rt$.__enclos_env__$private$..integral_expectation(528, 530, 530)*1.036317
model_Rt$.__enclos_env__$private$..integral_variance(528, 530, 530)^(0.5)
model_Rt$.__enclos_env__$private$..integral_expectation(528, 530, 530)
model_Rt$.__enclos_env__$private$..integral_variance(528, 530, 530)^(0.5)
model_Rt$.__enclos_env__$private$..integral_variance(526, 530, 530)^(0.5)
model_Rt$.__enclos_env__$private$..integral_expectation(526, 530, 530)*1.036317
solve
rm(list = ls())
devtools::document()
library(solarr)
spec <- solarModel_spec$new()
spec$set_mean.model(arOrder = 1, maOrder = 1)
spec$specification("Bologna")
save(spec, file = "data/Bologna.RData")
devtools::build_manual()
library(solarr)
