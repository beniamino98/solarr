M_Y_up <- Y_forecast + sqrt(self$seasonal_variance$predict(n+1))*NM$mu2[n+1]*exp(-self$theta)
dplyr::tibble(dw = M_Y_dw, up = M_Y_up, p1 = NM$p1[n+1], p2 = NM$p2[n+1])
},
S_Y = function(n){
NM <- self$seasonal_data
S_Y_dw <- sqrt(self$seasonal_variance$predict(n+1)*NM$sd1[n+1]*(1-exp(-2*self$theta))/(2*self$theta))
S_Y_up <- sqrt(self$seasonal_variance$predict(n+1)*NM$sd2[n+1]*(1-exp(-2*self$theta))/(2*self$theta))
dplyr::tibble(dw = S_Y_dw, up = S_Y_up, p1 = NM$p1[n+1], p2 = NM$p2[n+1])
},
pdf_Y = function(x, Rt, n){
mean <- unlist(self$M_Y(Rt, n)[,2:1])
sd <- unlist(self$S_Y(n)[,2:1])
alpha <- unlist(self$M_Y(Rt, n)[,3:4])
extraDistr::dmixnorm(x, mean, sd, alpha)
}
)
)
model <- solarModelCont$new("Bologna")
plot(model$pdf_Y(seq(-3, 3, 0.01), 2, 10))
model$R_to_Y(0.3, 2)
model$M_Y(4, 100)
model$data[144:145,]
Bologna$seasonal_variance
model <- Bologna$seasonal_variance
private <- model$.__enclos_env__$private
self <- model$.__enclos_env__$self
# Extract seasonal regressors
regressors <- formula.tools::get.vars(formula(private$..model))[-c(1)]
seasonal_regressors <- c(1, which(stringr::str_detect(regressors, "sin|cos")))
external_regressors <- which(!stringr::str_detect(regressors, "sin|cos"))
# Reparametrized parameters
coefs <- private$..model$coefficients[seasonal_regressors]
index <- seq(1, length(coefs)-1, by = 2)
param <- c(private$..model$coefficients[c(1, external_regressors)])
index
index <- seq(1, length(coefs)-1, by = 2)
param <- c(private$..model$coefficients[c(1, external_regressors)])
names(param) <- c("A", names(private$..model$coefficients[external_regressors]))
k <- 1
k <- 1
coefs_names <- names(param)
coefs_names
coefs[i + 1]
index
length(coefs)
param <- c(private$..model$coefficients[c(1, external_regressors)])
param
# Extract seasonal regressors
regressors <- formula.tools::get.vars(formula(private$..model))[-c(1)]
seasonal_regressors <- c(1, which(stringr::str_detect(regressors, "sin|cos")))
external_regressors <- which(!stringr::str_detect(regressors, "sin|cos"))
# Reparametrized parameters
coefs <- private$..model$coefficients[seasonal_regressors]
index <- seq(1, length(coefs)-1, by = 2)
param
# Extract seasonal regressors
regressors <- formula.tools::get.vars(formula(private$..model))[-c(1)]
regressors
seasonal_regressors <- c(1, which(stringr::str_detect(regressors, "sin|cos")))
seasonal_regressors
which(stringr::str_detect(regressors, "sin|cos"))
regressors
seasonal_regressors <- which(stringr::str_detect(regressors, "sin|cos")) + 1
external_regressors <- which(!stringr::str_detect(regressors, "sin|cos"))
external_regressors
which(!stringr::str_detect(regressors, "sin|cos")) + 1
external_regressors <- which(!stringr::str_detect(regressors, "sin|cos")) + 1
private$..model$coefficients[seasonal_regressors]
# Reparametrized parameters
coefs <- private$..model$coefficients[seasonal_regressors]
index <- seq(1, length(coefs)-1, by = 2)
index
seq(1, length(coefs)-1, by = 2)
index <- seq(1, length(coefs)-1, by = 2)
param <- c(private$..model$coefficients[c(1, external_regressors)])
param
private$..model$coefficients
external_regressors
private$..model$coefficients[c(1, external_regressors)]
param <- c(private$..model$coefficients[c(1, external_regressors)])
names(param) <- c("A", names(private$..model$coefficients[external_regressors]))
k <- 1
i <- 1
coefs_names <- names(param)
coefs_names
coefs[i + 1]
coefs[i + 2]
param <- c(param, sqrt(coefs[i + 1]^2 + coefs[i + 2]^2))
param <- c(param, atan(coefs[i + 2]/coefs[i + 1]) + ifelse(coefs[i + 1] < 0, -base::pi, 0))
param
coefs[i + 2]
coefs
# Reparametrized parameters
coefs <- private$..model$coefficients[c(1, seasonal_regressors)]
seq(1, length(coefs)-1, by = 2)
coefs
# Reparametrized parameters
coefs <- private$..model$coefficients[c(1, seasonal_regressors)]
index <- seq(1, length(coefs)-1, by = 2)
param <- c(private$..model$coefficients[c(1, external_regressors)])
param
names(param) <- c("A", names(private$..model$coefficients[external_regressors]))
k <- 1
i <- 1
coefs_names <- names(param)
param <- c(param, sqrt(coefs[i + 1]^2 + coefs[i + 2]^2))
param
param <- c(param, atan(coefs[i + 2]/coefs[i + 1]) + ifelse(coefs[i + 1] < 0, -base::pi, 0))
param
names(param) <- c(coefs_names, paste0(c("B", "phi"), k))
k <- k + 1
return(param)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
library(solarr)
library(solarr)
self <- Bologna$seasonal_model_Yt$.__enclos_env__$self
private <- Bologna$seasonal_model_Yt$.__enclos_env__$private
formula <- "Yt ~ 1"
data <- Bologna$data
self$order
formula
base_formula <- formula
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " + ", "sin((2*base::pi)/", eval(self$period), "*n*", i, ")", " + ",
"cos((2*base::pi)/", eval(self$period), "*n*", i, ")")
}
}
# Store the formula
private$mformula <- as.formula(formula)
self <- Bologna$seasonal_model_Yt$.__enclos_env__$self
private <- Bologna$seasonal_model_Yt$.__enclos_env__$private
base_formula <- formula
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " + ", "sin((2*base::pi)/", eval(self$period), "*n*", i, ")", " + ",
"cos((2*base::pi)/", eval(self$period), "*n*", i, ")")
}
}
# Store the formula
private$mformula <- as.formula(formula)
private
Bologna$seasonal_model_Yt$.__enclos_env__$private
# Control list
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
self <- Bologna$seasonal_model_Yt$.__enclos_env__$self
private <- Bologna$seasonal_model_Yt$.__enclos_env__$private
base_formula <- formula
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " + ", "sin((2*base::pi)/", eval(self$period), "*n*", i, ")", " + ",
"cos((2*base::pi)/", eval(self$period), "*n*", i, ")")
}
}
base_formula
formula <- "Yt ~ 1"
data <- Bologna$data
base_formula <- formula
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " + ", "sin((2*base::pi)/", eval(self$period), "*n*", i, ")", " + ",
"cos((2*base::pi)/", eval(self$period), "*n*", i, ")")
}
}
# Store the formula
private$mformula <- as.formula(formula)
# Fit seasonal model
private$..model <- lm(private$mformula, data = data, ...)
private$..model <- lm(private$mformula, data = data)
# Extract external seasonal regressors
external_regressors <- formula.tools::get.vars(formula(private$..model))[-c(1)]
external_regressors
external_regressors <- external_regressors[!stringr::str_detect(external_regressors, "sin|cos")]
external_regressors
# Store external seasonal regressors inside `seasonal_data` slot
if (!purrr::is_empty(external_regressors)) {
external_regressors <- data[, c("n", external_regressors)]
external_regressors <- external_regressors[!duplicated(external_regressors$n),]
self$seasonal_data <- dplyr::left_join(self$seasonal_data, external_regressors, by = c("n"))
}
self$coefficients2
coefs <- self$coefficients2
coefs[stringr::str_detect(names(coefs), "phi")]
coefs <- self$coefficients2
coef_phi <- coefs[stringr::str_detect(names(coefs), "phi")]
coef_B <- coefs[stringr::str_detect(names(coefs), "B")]
coef_phi
coef_B
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(base_formula, " + ", "I((2*base::pi)/", eval(self$period),
"*cos((2*base::pi)/", eval(self$period), "*n*", i, "+", eval(coef_phi[i]), "))")
}
}
formula
formula.tools::lhs(private$mformula)
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula.tools::lhs(private$mformula), "~ -1 +", "I((2*base::pi)/", eval(self$period),
"*cos((2*base::pi)/", eval(self$period), "*n*", i, "+", eval(coef_phi[i]), "))")
}
}
formula
# Store the formula
private$dformula <- as.formula(formula)
# Fit seasonal model
private$..dmodel <- lm(private$dformula, data = data)
private$..dmodel
private$..dmodel$coefficients <- coef_B
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
# Control list
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
# Control list
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
formula <- "Yt ~ 1"
data <- Bologna$data
spec$data
data
base_formula <- formula
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " + ", "sin((2*base::pi)/", eval(self$period), "*n*", i, ")", " + ",
"cos((2*base::pi)/", eval(self$period), "*n*", i, ")")
}
}
# Store the formula
private$mformula <- as.formula(formula)
# Fit seasonal model
private$..model <- lm(private$mformula, data = data, ...)
# Extract external seasonal regressors
external_regressors <- formula.tools::get.vars(formula(private$..model))[-c(1)]
external_regressors <- external_regressors[!stringr::str_detect(external_regressors, "sin|cos")]
private$..model <- lm(private$mformula, data = data)
#' The `seasonalModel` class implements a seasonal regression model as a linear combination of sine and cosine functions.
#' This model is designed to capture periodic effects in time series data, particularly for applications involving seasonal trends.
#'
#' @details
#' The seasonal model is fitted using a specified formula, which allows for the inclusion of external regressors along with sine and cosine terms
#' to model seasonal variations. The periodicity can be customized, and the model can be updated with new coefficients after fitting.
#'
#' @rdname seasonalModel
#' @name seasonalModel
#' @export
seasonalModel <- R6::R6Class("seasonalModel",
public = list(
#' @field seasonal_data Tibble with externals seasonal regressors used.
seasonal_data = dplyr::tibble(n = c(seq(1, 59), 59.5, seq(60, 365))),
#' @field extra_params List customizable to contain eventual extra parameters.
extra_params = list(),
#' @method initialize seasonalModel
#' @description
#' Initialize a `seasonalModel` object.
#' @param order Integer, number of combinations of sines and cosines.
#' @param period Integer, seasonality period. The default is 365.
initialize = function(order = 1, period = 365){
# Store period and order
private$..period = period
private$..order = order
},
#' @method fit seasonalModel
#' @description
#' Fit a seasonal model as a linear combination of sine and cosine functions and
#' eventual external regressors specified in the formula. The external regressors used should
#' have the same periodicity, i.e. not stochastic regressors are allowed.
#' @param formula formula, an object of class `formula` (or one that can be coerced to that class).
#' It is a symbolic description of the model to be fitted and can be used to include or exclude the intercept or external regressors in `data`.
#' @param data 	an optional data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables in the model.
#' If not found in data, the variables are taken from environment(formula), typically the environment from which `lm` is called.
#' @param ... other parameters to be passed to the function `lm`.
fit = function(formula, data, ...){
base_formula <- formula
# Model formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " + ", "sin((2*base::pi)/", eval(self$period), "*n*", i, ")", " + ",
"cos((2*base::pi)/", eval(self$period), "*n*", i, ")")
}
}
# Store the formula
private$mformula <- as.formula(formula)
# Fit seasonal model
private$..model <- lm(private$mformula, data = data), ...)
# Extract external seasonal regressors
external_regressors <- formula.tools::get.vars(formula(private$..model))[-c(1)]
external_regressors <- external_regressors[!stringr::str_detect(external_regressors, "sin|cos")]
# Store external seasonal regressors inside `seasonal_data` slot
if (!purrr::is_empty(external_regressors)) {
external_regressors <- data[, c("n", external_regressors)]
external_regressors <- external_regressors[!duplicated(external_regressors$n),]
self$seasonal_data <- dplyr::left_join(self$seasonal_data, external_regressors, by = c("n"))
}
coefs <- self$coefficients2
coef_phi <- coefs[stringr::str_detect(names(coefs), "phi")]
coef_B <- coefs[stringr::str_detect(names(coefs), "B")]
# Model formula
formula <- paste0(formula.tools::lhs(private$mformula), " ~ -1")
formula
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " +", "I((2*base::pi)/", eval(self$period),
"*cos((2*base::pi)/", eval(self$period), "*n*", i, "+", eval(coef_phi[i]), "))")
}
}
formula
formula <- ""
if (self$order > 0) {
for (i in 1:self$order){
formula <- paste0(formula, " +", "I((2*base::pi)/", eval(self$period),
"*cos((2*base::pi)/", eval(self$period), "*n*", i, "+", eval(coef_phi[i]), "))")
}
}
formula
# Model formula
formula <- paste0(formula.tools::lhs(private$mformula), " ~ ", formula, " - 1")
# Store the formula
private$dformula <- as.formula(formula)
# Fit seasonal model
private$..dmodel <- lm(private$dformula, data = data)
private$..dmodel$coefficients <- coef_B
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
# Control list
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
formula
as.formula(formula)
# Fit seasonal model
private$..dmodel <- lm(private$dformula, data = data)
private$..dmodel$coefficients <- coef_B
lm(private$dformula, data = data)
control$seasonal.mean$include.H0
# Control list
control <- control_solarModel(outliers_quantile = 0, mean.model = list(arOrder = 1), garch_variance = FALSE)
control$seasonal.mean$include.H0
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$fit_clearsky_model()
Bologna$fit
Bologna$compute_risk_drivers()
Bologna$fit_solar_transform()
Bologna$detect_outliers_Yt()
Bologna$fit_seasonal_mean()
Bologna$corrective_monthly_mean()
Bologna$fit_AR_model()
Bologna$fit_seasonal_variance()
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
# Control list
control <- control_solarModel(outliers_quantile = 0, mean.model = list(arOrder = 1), garch_variance = FALSE)
control$seasonal.mean$include.H0
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
Bologna$fit_clearsky_model()
Bologna$compute_risk_drivers()
Bologna$fit_solar_transform()
Bologna$detect_outliers_Yt()
Bologna$fit_seasonal_mean()
Bologna$corrective_monthly_mean()
Bologna$fit_AR_model()
Bologna$fit_seasonal_variance()
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
# Control list
control <- control_solarModel(outliers_quantile = 0, mean.model = list(arOrder = 1), garch_variance = FALSE)
control$seasonal.mean$include.H0
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
Bologna$fit_clearsky_model()
Bologna$compute_risk_drivers()
Bologna$fit_solar_transform()
Bologna$detect_outliers_Yt()
Bologna$fit_seasonal_mean()
Bologna$corrective_monthly_mean()
Bologna$fit_AR_model()
Bologna$fit_seasonal_variance()
self$fit_GARCH_model()
# Model fit
Bologna$fit()
Bologna$seasonal_model_Yt$differential(1, 1)
Bologna$seasonal_model_Yt$predict(1)
Bologna$seasonal_model_Yt$predict(2) - Bologna$seasonal_model_Yt$predict(1)
Bologna$seasonal_model_Yt$predict(1) - Bologna$seasonal_model_Yt$predict(365)
Bologna$seasonal_model_Yt$differential(1, 1)
Bologna$seasonal_model_Yt$predict(1) - Bologna$seasonal_model_Yt$predict(366)
Bologna$seasonal_model_Yt$predict(2) - Bologna$seasonal_model_Yt$predict(1)
Bologna$seasonal_model_Yt$differential(2, 1)
Bologna$seasonal_model_Yt$differential(3, 1)
Bologna$seasonal_model_Yt$differential(3, 0.1)
Bologna$seasonal_model_Yt$differential(3, 1)
Bologna$seasonal_model_Yt$predict(3) - Bologna$seasonal_model_Yt$predict(2)
Bologna$seasonal_model_Yt$differential(3, 1)
Bologna$seasonal_model_Yt$differential(2, 1)
Bologna$seasonal_model_Yt$predict(3) - Bologna$seasonal_model_Yt$predict(2)
Bologna$seasonal_model_Yt$differential(180, 1)
Bologna$seasonal_model_Yt$predict(181) - Bologna$seasonal_model_Yt$predict(2)
Bologna$seasonal_model_Yt$predict(181) - Bologna$seasonal_model_Yt$predict(180)
Bologna$seasonal_model_Yt$predict(180) - Bologna$seasonal_model_Yt$predict(179)
Bologna$seasonal_model_Yt$differential(180, 1)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
Bologna$seasonal_model_Yt$differential("2022-01-01", 1)
Bologna$seasonal_model_Yt$predict("2022-01-01") - Bologna$seasonal_model_Yt$predict(179)
Bologna$seasonal_model_Yt$predict("2022-01-01") - Bologna$seasonal_model_Yt$predict("2022-01-01")
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
# Control list
control <- control_solarModel(outliers_quantile = 0, mean.model = list(arOrder = 1), garch_variance = FALSE)
control$seasonal.mean$include.H0
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$seasonal_model_Yt$differential("2022-01-01", 1)
Bologna$seasonal_model_Yt$predict("2022-01-01") - Bologna$seasonal_model_Yt$predict("2022-01-01")
Bologna$seasonal_model_Yt$predict("2022-01-02") - Bologna$seasonal_model_Yt$predict("2022-01-01")
Bologna$seasonal_model_Yt$differential("2022-01-01", 1)
Bologna$seasonal_model_Yt$differential("2022-01-01", 0.1)
Bologna$seasonal_model_Yt$differential("2022-01-01", 0.2)
Bologna$seasonal_model_Yt$differential("2022-01-01", 1)
rm(list = )
rm(list = ls())
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
save(Bologna, file = "data/Bologna.RData")
rm(list = ls())
devtools::document()
devtools::document()
library(solarr)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$seasonal_model_Yt$predict(1:365)
Bologna$seasonal_model_Yt$predict(2)
Bologna$seasonal_model_Yt$predict(c(1,2,3,))
Bologna$seasonal_model_Yt$predict(c(1,2,3))
n <- c(1,2,3)
dplyr::if_else(is.numeric(n), n, number_of_day(n))
ifelse(is.numeric(n), n, number_of_day(n))
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/seasonalModel.R")
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/solarModel.R")
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$seasonal_model_Yt$predict(c(1,2,3))
Bologna$seasonal_model_Yt$predict(c(1:365))
Bologna$seasonal_variance$predict(c(1:365))
Bologna$seasonal_data
control <- control_solarModel(outliers_quantile = 0,
mean.model = list(arOrder = 1), garch_variance = FALSE)
# Model specification
spec <- solarModel_spec("Bologna", from="2005-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
# save(Bologna, file = "data/Bologna.RData")
save(Bologna, file = "data/Bologna.RData")
library(solarr)
devtools::document()
devtools::document()
library(solarr)
