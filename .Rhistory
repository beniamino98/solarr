library(solarr)
library(solarr)
library(solarr)
library(solarr)
library(solarr)
library(solarr)
library(solarr)
solarr::CAMS_data
library(solarr)
library(solarr)
solarr::CAMS_data
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/CAMS.R")
library(solarr)
library(solarr)
library(solarr)
library(solarr)
library(solarr)
rm(list = ls())
library(solarr)
library(solarr)
fit_dnorm_mix
library(solarr)
library(solarr)
devtools::document()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual(path = getwd())
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
solar_movements(44.23, 11.20, day_date_time = "2040-01-01", day_time_end = "2040-01-03")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(solarr)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
solar_clearsky_hourly(cosZ = 1, altitude = 2.5, clime = "No Correction")
solar_clearsky_hourly(cosZ = 0.4, altitude = 2.5, clime = "No Correction")
#' @param altitude altitude in meters.
#' @param clime correction for different climes, can be `No Correction`, `Summer`, `Winter`, `Subartic Summer`, `Tropical`.
#'
#' @examples
#' solar_clearsky_hourly(cosZ = 0.4, altitude = 2.5, clime = "No Correction")
#'
#' @name solar_clearsky_hourly
#' @rdname solar_clearsky_hourly
#' @return a numeric vector containing the time adjustment in minutes.
#' @export
solar_clearsky_hourly <- function(cosZ = NULL, G0 = NULL, altitude = 2.5, clime = "No Correction"){
# correction for different climes
clime <- match.arg(clime[1], choices = c("No Correction", "Summer", "Winter", "Subartic Summer", "Tropical"))
# altitude must be converted from metre to km
altitude <- altitude/1000
if (altitude > 2.5) {
a0_star <- 0.6*(1-exp(-0.214*(altitude - 1.12)))
} else {
a0_star <- 0.4237 - 0.00821*(6.0 - altitude)^2
}
a1_star <- 0.5055 - 0.00595*(6.5 - altitude)^2
a2_star <- 0.2711 - 0.01858*(2.5 - altitude)^2
# Correction for Climetypes
if(clime == "No Correction"){
a0 <- a0_star
a1 <- a1_star
a2 <- a2_star
} else if (clime == "Summer"){
a0 <- a0_star*0.97
a1 <- a1_star*0.99
a2 <- a2_star*1.02
} else if (clime == "Winter"){
a0 <- a0_star*1.03
a1 <- a1_star*1.01
a2 <- a2_star*1.00
} else if (clime == "Subartic Summer"){
a0 <- a0_star*0.99
a1 <- a1_star*0.99
a2 <- a2_star*1.01
} else if (clime == "Tropical"){
a0 <- a0_star*0.95
a1 <- a1_star*0.98
a2 <- a2_star*1.02
}
output <- dplyr::tibble(tau_beam = a0 + a1*exp(-a2/cosZ), tau_diffuse = 0.271 - 0.294*tau_beam)
output <- dplyr::mutate(output,
tau_beam = ifelse(tau_beam > 1 | tau_beam  < 0, 0, tau_beam),
tau_diffuse = ifelse(tau_diffuse > 1 | tau_diffuse  < 0, 0, tau_diffuse))
skymax <- G0*output$tau_beam + G0*output$tau_diffuse
return(skymax)
}
solar_clearsky_hourly(cosZ = 0.4, G0 = 100, altitude = 2.5, clime = "No Correction")
solar_clearsky_hourly(cosZ = 0.4, G0 = 4, altitude = 2.5, clime = "No Correction")
solar_clearsky_hourly(cosZ = 0.4, G0 = 4, altitude = 2.5, clime = "No Correction")
devtools::document()
rm(list = )
rm(list = ls())
devtools::document()
library(solarr)
library(solarr)
devtools::document()
library(solarr)
devtools::document()
library(solarr)
library(solarr)
devtools::document()
library(solarr)
library(solarr)
mean_model = list(seasonalOrder = 1,include.intercept = FALSE)
mean.model = list(seasonalOrder = 1, arOrder = 2, include.intercept = FALSE)
mean_model
match.arg(mean_model)
ifelse(!is.null(mean.model[["seasonalOrder"]]), mean.model[["seasonalOrder"]], mean_model[["seasonalOrder"]])
devtools::document()
library(solarr)
rm(list = ls())
library(solarr)
