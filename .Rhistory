exercise_Qup = payoff[[type]]$Qup$payoff_month_day$exercise,
exercise_Qdw = payoff[[type]]$Qdw$payoff_month_day$exercise,
n = payoff$hist$payoff_month_day$n
)
# Historical Daily Premiums
df_payoff <- dplyr::select(payoff$hist$payoff, -exercise, -GHI, -strike)
payoffs[[option_type]][c("hist", type)]
payoff <- payoffs[[option_type]][c("hist", type)]
# Yearly Premium
df_year <- dplyr::tibble(
side =  payoff$hist$payoff_year$side,
ndays =  payoff$hist$payoff_year$ndays,
# Premiums for the option
premium = payoff$hist$payoff_year$premium,
premium_P = payoff[[type]]$P$payoff_year$premium,
premium_Q = payoff[[type]]$Q$payoff_year$premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_year$premium,
premium_Qup = payoff[[type]]$Qup$payoff_year$premium,
# Probabilities of exercise the option
exercise = payoff$hist$payoff_year$exercise,
exercise_P = payoff[[type]]$P$payoff_year$exercise,
exercise_Q = payoff[[type]]$Q$payoff_year$exercise,
exercise_Qup = payoff[[type]]$Qup$payoff_year$exercise,
exercise_Qdw = payoff[[type]]$Qdw$payoff_year$exercise,
)
# Monthly Premium
df_month <- dplyr::tibble(
Month = payoff$hist$payoff_month$Month,
side = payoff$hist$payoff_month$side,
n = payoff$hist$payoff_month$ndays,
# Premiums for the option
premium = payoff$hist$payoff_month$premium,
premium_P = payoff[[type]]$P$payoff_month$premium,
premium_Q = payoff[[type]]$Q$payoff_month$premium,
premium_Qup = payoff[[type]]$Qup$payoff_month$premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_month$premium,
# Probabilities of exercise the option
exercise = payoff$hist$payoff_month$exercise,
exercise_P = payoff[[type]]$P$payoff_month$exercise,
exercise_Q = payoff[[type]]$Q$payoff_month$exercise,
exercise_Qup = payoff[[type]]$Qup$payoff_month$exercise,
exercise_Qdw = payoff[[type]]$Qdw$payoff_month$exercise,
)
# Monthly Daily Premium
df_month_day_mean <- dplyr::tibble(
Month = payoff$hist$payoff_month$Month,
side = payoff$hist$payoff_month$side,
n = payoff$hist$payoff_month$ndays,
# Premiums for the option
premium = payoff$hist$payoff_month$daily_premium,
premium_P = payoff[[type]]$P$payoff_month$daily_premium,
premium_Q = payoff[[type]]$Q$payoff_month$daily_premium,
premium_Qup = payoff[[type]]$Qup$payoff_month$daily_premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_month$daily_premium,
)
# Monthly-Day Premium
df_month_day <- dplyr::tibble(
Month = payoff$hist$payoff_month_day$Month,
Day = payoff$hist$payoff_month_day$Day,
side = payoff$hist$payoff_month_day$side,
# Premiums for the option
premium = payoff$hist$payoff_month_day$premium,
premium_P = payoff[[type]]$P$payoff_month_day$premium,
premium_Q = payoff[[type]]$Q$payoff_month_day$premium,
premium_Qup = payoff[[type]]$Qup$payoff_month_day$premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_month_day$premium,
# Probabilities of exercise the option
exercise = payoff$hist$payoff_month_day$exercise,
exercise_P = payoff[[type]]$P$payoff_month_day$exercise,
exercise_Q = payoff[[type]]$Q$payoff_month_day$exercise,
exercise_Qup = payoff[[type]]$Qup$payoff_month_day$exercise,
exercise_Qdw = payoff[[type]]$Qdw$payoff_month_day$exercise,
n = payoff$hist$payoff_month_day$n
)
# Historical Daily Premiums
df_payoff <- dplyr::select(payoff, -exercise, -GHI, -strike)
option_type <- ifelse(put, "put", "call")
type <- match.arg(type, choices = c("scenarios", "model"))
payoff <- payoffs[[option_type]][c("hist", type)]
payoffs[[option_type]]
payoff <- payoffs[[option_type]][c("historical", type)]
# Yearly Premium
df_year <- dplyr::tibble(
side =  payoff$historical$payoff_year$side,
ndays =  payoff$historical$payoff_year$ndays,
# Premiums for the option
premium = payoff$historical$payoff_year$premium,
premium_P = payoff[[type]]$P$payoff_year$premium,
premium_Q = payoff[[type]]$Q$payoff_year$premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_year$premium,
premium_Qup = payoff[[type]]$Qup$payoff_year$premium,
# Probabilities of exercise the option
exercise = payoff$historical$payoff_year$exercise,
exercise_P = payoff[[type]]$P$payoff_year$exercise,
exercise_Q = payoff[[type]]$Q$payoff_year$exercise,
exercise_Qup = payoff[[type]]$Qup$payoff_year$exercise,
exercise_Qdw = payoff[[type]]$Qdw$payoff_year$exercise,
)
# Monthly Premium
df_month <- dplyr::tibble(
Month = payoff$historical$payoff_month$Month,
side = payoff$historical$payoff_month$side,
n = payoff$historical$payoff_month$ndays,
# Premiums for the option
premium = payoff$historical$payoff_month$premium,
premium_P = payoff[[type]]$P$payoff_month$premium,
premium_Q = payoff[[type]]$Q$payoff_month$premium,
premium_Qup = payoff[[type]]$Qup$payoff_month$premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_month$premium,
# Probabilities of exercise the option
exercise = payoff$historical$payoff_month$exercise,
exercise_P = payoff[[type]]$P$payoff_month$exercise,
exercise_Q = payoff[[type]]$Q$payoff_month$exercise,
exercise_Qup = payoff[[type]]$Qup$payoff_month$exercise,
exercise_Qdw = payoff[[type]]$Qdw$payoff_month$exercise,
)
# Monthly Daily Premium
df_month_day_mean <- dplyr::tibble(
Month = payoff$historical$payoff_month$Month,
side = payoff$historical$payoff_month$side,
n = payoff$historical$payoff_month$ndays,
# Premiums for the option
premium = payoff$historical$payoff_month$daily_premium,
premium_P = payoff[[type]]$P$payoff_month$daily_premium,
premium_Q = payoff[[type]]$Q$payoff_month$daily_premium,
premium_Qup = payoff[[type]]$Qup$payoff_month$daily_premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_month$daily_premium,
)
# Monthly-Day Premium
df_month_day <- dplyr::tibble(
Month = payoff$historical$payoff_month_day$Month,
Day = payoff$historical$payoff_month_day$Day,
side = payoff$historical$payoff_month_day$side,
# Premiums for the option
premium = payoff$historical$payoff_month_day$premium,
premium_P = payoff[[type]]$P$payoff_month_day$premium,
premium_Q = payoff[[type]]$Q$payoff_month_day$premium,
premium_Qup = payoff[[type]]$Qup$payoff_month_day$premium,
premium_Qdw = payoff[[type]]$Qdw$payoff_month_day$premium,
# Probabilities of exercise the option
exercise = payoff$historical$payoff_month_day$exercise,
exercise_P = payoff[[type]]$P$payoff_month_day$exercise,
exercise_Q = payoff[[type]]$Q$payoff_month_day$exercise,
exercise_Qup = payoff[[type]]$Qup$payoff_month_day$exercise,
exercise_Qdw = payoff[[type]]$Qdw$payoff_month_day$exercise,
n = payoff$hist$payoff_month_day$n
)
# Historical Daily Premiums
df_payoff <- dplyr::select(payoff$historical$payoff, -exercise, -GHI, -strike)
if (!exact_daily_premium) {
df_payoff <- dplyr::left_join(df_payoff, dplyr::select(df_month_day_mean, Month, premium:premium_Qdw), by = c("Month"))
} else {
df_payoff <- dplyr::left_join(df_payoff, dplyr::select(df_month_day, Month, Day, premium:premium_Qdw), by = c("Month", "Day"))
}
df_payoff <- dplyr::mutate(df_payoff, net_payoff = payoff - premium)
df_payoff
# Cumulated Historical Payoff minus (daily) Premiums
j <- 1
cumulated_payoff <- list()
seq_years <- seq(min(df_payoff$Year), max(df_payoff$Year), 1)
for (j in 1:length(seq_years)){
df_cum <- dplyr::filter(df_payoff, Year == seq_years[j])
# Remove the 29-02 for graphic purposes
df_cum <- df_cum[paste0(df_cum$Month, "-", df_cum$Day) != "2-29",]
df_cum <- dplyr::mutate(df_cum,
cum_net_payoff = NA,
cum_net_payoff_Qdw = NA,
cum_net_payoff_P = NA,
cum_net_payoff_Q = NA,
cum_net_payoff_Qup = NA)
ndays <- nrow(df_cum)
for(i in 1:nrow(df_cum)){
df_cum$cum_net_payoff[i] <- (df_year$premium + sum(df_cum$payoff[1:i]) - sum(df_cum$premium[1:i]))
df_cum$cum_net_payoff_P[i] <- df_year$premium_P + sum(df_cum$payoff[1:i] - df_cum$premium_P[1:i])
df_cum$cum_net_payoff_Q[i] <- df_year$premium_Q + sum(df_cum$payoff[1:i] - df_cum$premium_Q[1:i])
df_cum$cum_net_payoff_Qdw[i] <- df_year$premium_Qdw + sum(df_cum$payoff[1:i] - df_cum$premium_Qdw[1:i])
df_cum$cum_net_payoff_Qup[i] <- df_year$premium_Qup + sum(df_cum$payoff[1:i] - df_cum$premium_Qup[1:i])
}
cumulated_payoff[[j]] <- df_cum
}
# Compute the expected trajectory for each day
df_cum <- dplyr::bind_rows(cumulated_payoff) %>%
dplyr::group_by(Month, Day) %>%
dplyr::mutate(
e_cum_net_payoff = mean(cum_net_payoff),
e_cum_net_payoff_P = mean(cum_net_payoff_P),
e_cum_net_payoff_Q = mean(cum_net_payoff_Q),
e_cum_net_payoff_Qdw = mean(cum_net_payoff_Qdw),
e_cum_net_payoff_Qup = mean(cum_net_payoff_Qup),
) %>%
dplyr::ungroup()
payoffs[[option_type]][[type]]$structured <- list(payoff = df_payoff,
payoff_year = df_year,
payoff_month = df_month,
payoff_month_day = df_month_day,
payoff_cum = df_cum)
option_type
payoffs$call$model$structured
control$control_options$B(1)
control$control_options$B(365)
control$control_options$B(365)^(-1)
control$control_options$B(366)^(-1)
control$control_options$B(364)^(-1)
control$control_options$B(365)^(-1)
control$control_options$B
control$control_options$B(365)^(-1)
# Add discounted payoff
r <- control$control_options$B(365)^(-1)-1
Location$esscher$predict(r, target.Yt = FALSE)
control_location <- function(place = "Bologna", max_date = "2023-11-10", from = "2005-01-01", to = "2023-11-08", n_key_points = 5,
nsim = 2, by = "1 month",  nsim_boot = 100, ci = 0.05, seed = 1,
control_model = control_solarModel(), control_options = control_solarOption()){
list(
place = place,
max_date = as.Date(max_date),
from = as.Date(from),
to = as.Date(to),
n_key_points = n_key_points,
# Scenarios
nsim = nsim,
by = by,
# Bootstrap
nsim_boot = nsim_boot,
ci = ci,
seed = seed,
# Control
control_model = control_model,
control_options = control_options
)
}
control <- control_location()
generateLocation <- function(control = control_location()) {
# ********************* Settings *********************
place = control$place
max_date = control$max_date
from = control$from
to = control$to
nsim = control$nsim
by = control$by
nsim_boot = control$nsim_boot
ci = control$ci
seed = control$seed
n_key_points = control$n_key_points
control_model = control$control_model
control_options = control$control_options
from_sim <- control$control_options$from
to_sim <- control$control_options$to
# *****************************************************
# 1) Model specification and fit
spec <- solarModel_spec(place, max_date = max_date, from = from, to = to,
CAMS_data = solarr::CAMS_data, control_model = control_model)
model <- solarModel$new(spec)
model$fit()
# 2) Initialize a payoff object
payoffs <- solarOptionPayoffs(model, control_options = control_options)
# Add model price (P-measure)
payoffs$call$model$P <- solarOption_model(model, theta = 0, put = FALSE, control_options = control_options)
payoffs$put$model$P <- solarOption_model(model, theta = 0, put = TRUE, control_options = control_options)
# Add bootstrapped price (P-measure)
payoffs$call$model$boot <- solarOption_historical_bootstrap(model, put = FALSE,  nsim = nsim_boot, ci = ci, seed = seed, control_options = control_options)
payoffs$put$model$boot <- solarOption_historical_bootstrap(model, put = TRUE,  nsim = nsim_boot, ci = ci, seed = seed, control_options = control_options)
# 3) Calibrate Esscher bounds and optimal parameters
esscher <- solarEsscher$new(n_key_points = n_key_points, target.Yt = FALSE, control_options = control_options)
esscher$calibrate_bounds(model, payoffs)
# Add model price (Q-measure)
payoffs$call$model$Q <- solarOption_model(model, theta = esscher$bounds$Rt$Q, put = FALSE, target.Yt = FALSE, control_options = control_options)
payoffs$put$model$Q  <- solarOption_model(model, theta = esscher$bounds$Rt$Q, put = TRUE, target.Yt = FALSE, control_options = control_options)
# Add model price (Q-measure)
payoffs$call$model$Qdw <- solarOption_model(model, theta = esscher$bounds$Rt$Qdw, put = FALSE, target.Yt = FALSE, control_options = control_options)
payoffs$put$model$Qdw  <- solarOption_model(model, theta = esscher$bounds$Rt$Qdw,  put = TRUE, target.Yt = FALSE, control_options = control_options)
# Add model price (Q-measure)
payoffs$call$model$Qup <- solarOption_model(model, theta = esscher$bounds$Rt$Qup, put = FALSE, target.Yt = FALSE, control_options = control_options)
payoffs$put$model$Qup  <- solarOption_model(model, theta = esscher$bounds$Rt$Qup,  put = TRUE, target.Yt = FALSE,control_options = control_options)
# 4) Parametrize Esscher Theta
pay <- payoffs$put$model
# Benchmark price with r = 0
benchmark_price <- pay$P$payoff_year$premium
# Benchmark for best case prices with r > 0
lower <- pay$Qdw$payoff_year$premium
# Benchmark for worste case prices with r < 0
upper <- pay$Qup$payoff_year$premium
# Create the grid of esscher parameters for Yt
esscher$create_grid(model, benchmark_price, lower_price = lower, upper_price = upper, target.Yt = TRUE)
# Create the grid of esscher parameters for Rt
esscher$create_grid(model, benchmark_price, lower_price = lower, upper_price = upper, target.Yt = FALSE)
# Esscher parametric function, bounds and optimal theta for change of measure
esscher$fit_theta()
# Add discounted payoff
r <- control$control_options$B(365)^(-1)-1
payoffs$call$model$Qr <- solarOption_model(model, theta = esscher$predict(r, target.Yt = FALSE), put = FALSE, target.Yt = FALSE, control_options = control_options)
payoffs$put$model$Qr  <- solarOption_model(model, theta = esscher$predict(r, target.Yt = FALSE),  put = TRUE, target.Yt = FALSE,control_options = control_options)
# 5) Check consistency between model and simulations
scenarios <- list(P = NA, Q = NA, Qup = NA, Qdw = NA, Qr = NA)
# Simulate P-scenarios
scenarios$P <- solarScenario(model = model, by = by, nsim = nsim, seed = seed, theta = 0, from = from_sim, to = to_sim)
# From P to Q measure (simulations)
scenarios$Q <- solarScenario(model = model, by = by, nsim = nsim, seed = seed, theta = esscher$bounds$Yt$Q, from = from_sim, to = to_sim)
# From P to Qup measure (simulations)
scenarios$Qup <- solarScenario(model = model, by = by, nsim = nsim, seed = seed, theta = esscher$bounds$Yt$Qup, from = from_sim, to = to_sim)
# From P to Qdw measure (simulations)
scenarios$Qdw <- solarScenario(model = model, by = by, nsim = nsim, seed = seed, theta = esscher$bounds$Yt$Qdw, from = from_sim, to = to_sim)
# From P to Qr measure (simulations)
scenarios$Qr <- solarScenario(model = model, by = by, nsim = nsim, seed = seed, theta = esscher$predict(r, target.Yt = TRUE), from = from_sim, to = to_sim)
# P-payoff
payoffs$call$scenarios$P <- solarOption_scenario(scenarios$P, put = FALSE, control_options = control_options)
payoffs$put$scenarios$P <- solarOption_scenario(scenarios$P, put = TRUE, control_options = control_options)
# Q-Payoff (from P to Q)
payoffs$call$scenarios$Q <- solarOption_scenario(scenarios$Q, put = FALSE, control_options = control_options)
payoffs$put$scenarios$Q <- solarOption_scenario(scenarios$Q, put = TRUE, control_options = control_options)
# Qdw-Payoff (from P to Qdw)
payoffs$call$scenarios$Qdw <- solarOption_scenario(scenarios$Qdw, put = FALSE, control_options = control_options)
payoffs$put$scenarios$Qdw <- solarOption_scenario(scenarios$Qdw, put = TRUE, control_options = control_options)
# Qup-Payoff (from P to Qup)
payoffs$call$scenarios$Qup <- solarOption_scenario(scenarios$Qup, put = FALSE, control_options = control_options)
payoffs$put$scenarios$Qup <- solarOption_scenario(scenarios$Qup, put = TRUE, control_options = control_options)
# Qr-Payoff (from P to Qup)
payoffs$call$scenarios$Qr <- solarOption_scenario(scenarios$Qr, put = FALSE, control_options = control_options)
payoffs$put$scenarios$Qr <- solarOption_scenario(scenarios$Qr, put = TRUE, control_options = control_options)
# Location Environment
Location <- new.env(parent = .GlobalEnv)
Location$spec <- spec
Location$model <- model$clone(deep = TRUE)
Location$scenarios <- scenarios
Location$payoffs <- payoffs
Location$esscher <- esscher$clone(deep = TRUE)
return(Location)
}
print.solarOptionPayoff(Location$payoffs)
rm(list = ls(
))
library(solarr)
control_location <- function(max_date = "2023-11-10", from = "2005-01-01", to = "2023-11-08", n_key_points = 5,
nsim = 2, by = "1 month",  nsim_boot = 100, ci = 0.05, seed = 1,
control_model = control_solarModel(), control_options = control_solarOption()){
list(
max_date = as.Date(max_date),
from = as.Date(from),
to = as.Date(to),
n_key_points = n_key_points,
# Scenarios
nsim = nsim,
by = by,
# Bootstrap
nsim_boot = nsim_boot,
ci = ci,
seed = seed,
# Control
control_model = control_model,
control_options = control_options
)
}
control <- control_location()
devtools::document()
devtools::document()
library(solarr)
formals(dsolarGHI)
dnorm
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(solarr)
library(solarr)
pdf <- function(x) dmixnorm(x, c(-0.8, 0.5), c(1.2, 0.7), c(0.3, 0.7))
GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, pdf))
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
#' # Random generator (II)
#' pdf <- function(x) dmixnorm(x, c(-0.8, 0.5), c(1.2, 0.7), c(0.3, 0.7))
#' GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, pdf))
#' plot(1:366, GHI, type="l")
#' @rdname dsolarGHI
#' @aliases dsolarGHI
#' @aliases psolarGHI
#' @aliases qsolarGHI
#' @aliases rsolarGHI
#' @export
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
#' # Random generator (II)
#' pdf <- function(x) dmixnorm(x, c(-0.8, 0.5), c(1.2, 0.7), c(0.3, 0.7))
#' GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, pdf))
#' plot(1:366, GHI, type="l")
#' @rdname dsolarGHI
#' @aliases dsolarGHI
#' @aliases psolarGHI
#' @aliases qsolarGHI
#' @aliases rsolarGHI
#' @export
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
}
}
#' # Random generator (II)
#' pdf <- function(x) dmixnorm(x, c(-0.8, 0.5), c(1.2, 0.7), c(0.3, 0.7))
#' GHI <- purrr::map(Ct, ~rsolarGHI(1, .x, 0.001, 0.9, pdf))
#' plot(1:366, GHI, type="l")
#' @rdname dsolarGHI
#' @aliases dsolarGHI
#' @aliases psolarGHI
#' @aliases qsolarGHI
#' @aliases rsolarGHI
#' @export
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
.Call("dsolarGHI", x, Ct, alpha, beta, pdf_Yt, as.integer(log))
}
}
dsolarGHI <- function(x, Ct, alpha, beta, pdf_Yt, log = FALSE) {
.Call("dsolarGHI", x, Ct, alpha, beta, pdf_Yt, as.integer(log))
}
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x, sd=2))
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
devtools::document()
devtools::document()
devtools::document()
library(solarr)
library(solarr)
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
devtools::document()
devtools::clean_dll()
devtools::document()
library(solarr)
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
getNativeSymbolInfo("dsolarGHI", "solarGHI")
devtools::document()
devtools::clean_dll()
devtools::document()
library(solarr)
dsolarGHI(5, 7, 0.001, 0.9, function(x) dnorm(x))
getNativeSymbolInfo("dsolarGHI", "solarr")
devtools::document()
devtools::document()
library(solarr)
pdf <- PDF(dnorm, mean = 0.3, sd = 1.3)
pdf(3)
dnorm(3, mean = 0.3, sd = 1.3)
# Distribution
cdf <- CDF(dnorm, mean = 0.3, sd = 1.3)
cdf(3)
cdf <- CDF(dnorm, mean = 0.3, sd = 1.3)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/PDF.R")
# Distribution
cdf <- CDF(dnorm, mean = 0.3, sd = 1.3)
cdf(3)
pnorm(3, mean = 0.3, sd = 1.3)
# Numeric quantile function
pnorm(numericQuantile(dnorm)(0.9))
@name PDF
Quantile
# Density function (right)
p <- dsnorm(x, shape = 4.9)
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/dsn.R")
# Grid of points
x <- seq(-5, 5, 0.01)
# Density function (skewed right)
p <- dsnorm(x, shape = 4.9)
plot(x, p, type = "l")
# Density function (skewed right)
p <- dsnorm(x, shape = 4.9)
plot(x, p, type = "l")
plot(x, p, type = "l")
x
p
plot(x, p, type = "l")
rm(plot)
plot(x, p, type = "l")
dsnorm(x, shape = 4.9)
p <- dsnorm(x, shape = 4.9)
library(ggplot2)
ggplot()+
geom_line(aes(x, p))
source("~/Documents/University/PhD/Projects/solar-project/R/solarr/R/dsn.R")
# Grid of points
x <- seq(-5, 5, 0.01)
# Density function (skewed right)
p <- dsnorm(x, shape = 4.9)
plot(x, p, type = "l")
# Density function (skewed right)
p <- dsnorm(x, shape = -4.9)
plot(x, p, type = "l")
# Density function (left tailed)
p <- dsnorm(x, shape = -4.9)
plot(x, p, type = "l")
# Distribution function
p <- psnorm(x)
plot(x, p, type = "l")
# Quantile function
dsnorm(0.1)
psnorm(qsnorm(0.9))
devtools::document()
devtools::build_manual()
library(solarr)
library(solarr)
library(solarr)
control <- control_solarModel(outliers_quantile = 0.005)
# Model specification
spec <- solarModel_spec("Oslo", from="2005-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$parameters
Bologna$parameters$AR_model_Yt
spec <- solarModel_spec("Oslo", from="2008-01-01", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$parameters$AR_model_Yt
spec <- solarModel_spec("Oslo", from="2005-01-04", to="2022-01-01", control_model = control)
Bologna <- solarModel$new(spec)
# Model fit
Bologna$fit()
Bologna$parameters
Bologna$parameters$AR_model_Yt
